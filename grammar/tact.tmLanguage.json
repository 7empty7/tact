{
  "fileTypes": [
    "tact"
  ],
  "foldingStartMarker": "\\{s*$",
  "foldingStopMarker": "^\\s*\\}",
  "name": "tact",
  "scopeName": "source.tact",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#import"
    },
    {
      "include": "#struct"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numeric"
    }
  ],
  "repository": {
    "import": {
      "name": "meta.import.tact",
      "begin": "\\b(import)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.import.tact"
        }
      },
      "end": "\\s*(;)",
      "endCaptures": {
        "1": {
          "name": "punctuation.terminator.tact"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "struct": {
      "name": "meta.struct.tact",
      "begin": "\\b(struct|message)\\b\\s+([\\w]+)\\s+",
      "beginCaptures": {
        "0": {
          "name": "keyword.other.struct"
        },
        "1": {
          "name": "storage.type.tact"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.struct.end.bracket.curly.tact"
        }
      }
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.tact",
          "match": "\\b(if|else|while|do|until|repeat|return|extends|mutates|native|let|fun|self|is|initOf|map|get|as)\\b"
        },
        {
          "name": "keyword.operator",
          "match": "(?<=\\s)(<=>|>=|<=|!=|==|\\^>>|\\~>>|>>|<<|\\/%|\\^%|\\~%|\\^\\/|\\~\\/|\\+=|-=|\\*=|\\/=|~\\/=|\\^\\/=|%=|\\^%=|<<=|>>=|~>>=|\\^>>=|&=|\\|=|\\^=|\\^|=|~|\\/|%|-|\\*|\\+|>|<|&|\\||:|\\?)(?=\\s)"
        },
        {
          "name": "keyword.other",
          "match": "\\b(false|true)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.tact",
      "begin": "\"",
      "end": "\""
    },
    "numeric": {
      "name": "constant.numeric",
      "match": "(-?([\\d]+|0x[\\da-fA-F]+))\\b"
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line",
          "match": "\\/\\/(.*)"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "(?!\")(`([^`]+)`|((?=_)_|(?={){|(?=})}|(?![_`{}]))([^;,\\[\\]\\(\\)\\s~.]+))",
          "name": "variable.name"
        }
      ]
    }
  }
}
