# TACT TextMate grammar file
# Built using ideas from https://github.com/microsoft/TypeScript-TmLanguage/blob/44ab72b502092e6797791078d181747fc9512097/TypeScript.YAML-tmLanguage
---
name: tact
scopeName: source.tact
fileTypes: [tact]
foldingStartMarker: "\\{s*$"
foldingStopMarker: "^\\s*\\}"

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  startOfDeclaration: "{{startOfIdentifier}}"
  hexNumber: \b0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*\b
  decNumber: \b[0-9]+\b
  anyNumber: (?:{{hexNumber}})|(?:{{decNumber}})
  inlineComment: \/\*([^\*]|(\*[^\/]))*\*\/
  space: (?:\s|(?:{{inlineComment}}))*
  id: '\b[\w]+\b'

patterns:
  - include: "#comments"
  - include: "#import"
  - include: "#struct"
  - include: "#contract-or-trait"
  - include: "#fun-declaration"
  - include: "#numeric"
  - include: "#keywords"
  - include: "#variables"
  - include: "#strings"

repository:
  import:
    name: meta.import.tact
    begin: '{{startOfDeclaration}}\b(import)\b\s*'
    beginCaptures:
      "1":
        name: keyword.other.import.tact
    end: \s*(;)
    endCaptures:
      "1":
        name: punctuation.terminator.tact
    patterns:
      - include: "#comments"
      - include: "#strings"
      # - name: invalid.illegal.character_not_allowed_here.tact
      #   match: ^(\"[.]*\")

  # structure and message definition
  struct:
    name: meta.struct.tact
    begin: '{{startOfDeclaration}}\b(struct|message)\b'
    beginCaptures:
      "1":
        name: keyword.other.struct
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#struct-header"
      - include: "#struct-body"
  struct-header:
    patterns:
      - include: "#comments"
      - match: "{{id}}"
        captures:
          "0": { name: "entity.name.type.tact" }
      - match: '\(({{anyNumber}})\)'
        captures:
          "1": { name: "constant.numeric" }
  struct-body:
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.block.tact }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.block.tact }
    patterns:
      - include: "#comments"
      - include: "#field-declaration"

  # structure and message definition
  contract-or-trait:
    name: meta.struct.tact
    begin: '{{startOfDeclaration}}\b(contract|trait)\b'
    beginCaptures:
      "1":
        name: keyword.other.struct
    end: (?<=\})
    patterns:
      - include: "#comments"
      - name: keyword.control.with.tact
        match: "with"
      - name: entity.name.type.tact
        match: "{{id}}"
      - include: "#contract-or-trait-body"
  contract-or-trait-body:
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.block.tact }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.block.tact }
    patterns:
      - include: "#comments"
      - include: "#init-declaration"
      - include: "#fun-declaration"
      - include: "#field-declaration"

  # Body
  field-declaration:
    name: meta.struct.field.tact
    begin: "({{id}})"
    beginCaptures:
      "1":
        name: variable.object.property.tact
    end: "(;)"
    endCaptures:
      "1":
        name: punctuation.terminator.tact
    patterns:
      - include: "#comments"
      - name: keyword.operator.type.annotation.tact
        match: ":"
      - name: keyword.control.as.tact
        match: "as"
      - name: keyword.operator.optional.tact
        match: \?
      - name: entity.name.type.tact
        match: "{{id}}"

  # Init
  init-declaration:
    name: meta.struct.field.tact
    begin: "(init)"
    beginCaptures:
      "1":
        name: keyword.control.init.tact
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#fun-arguments"
      - include: "#block-declaration"

  # Function
  fun-declaration:
    name: meta.function.tact
    begin: \b(get|native|extends|mutates|fun)\b
    beginCaptures:
      "1":
        name: storage.modifier.tact
    end: (?<=\})
    patterns:
      - include: "#fun-declaration-body"
  fun-declaration-body:
    patterns:
      - include: "#comments"
      - include: "#fun-arguments"
      - include: "#block-declaration"
      - name: storage.modifier.tact
        match: \b(get|native|extends|mutates|fun)\b
      - name: meta.definition.function.tact entity.name.function.tact
        match: "{{id}}"

  # Arguments
  fun-arguments:
    name: meta.parameters.tact
    begin: \(
    beginCaptures:
      "0": { name: punctuation.definition.parameters.begin.tact }
    end: \)
    endCaptures:
      "0": { name: punctuation.definition.parameters.end.tact }
    patterns:
      - include: "#comments"
      - include: "#strings"
      - match: '(?:(self)|({{id}}))\s*(:)\s*({{id}})'
        captures:
          "1": { name: variable.language.self.tact }
          "2": { name: entity.name.function.tact }
          "4": { name: entity.name.type.tact }

  # Code block
  block-declaration:
    name: meta.block.tact
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.block.tact }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.block.tact }
    patterns:
      - include: "#statements"

  # Statements
  statements:
    patterns:
      - include: "#comments"
      - include: "#code-block"
      - include: "#keywords"
      - include: "#numeric"
      - include: "#strings"

  # Low level
  keywords:
    patterns:
      - name: keyword.control.tact
        match: \b(if|else|while|do|until|repeat|return|extends|mutates|native|let|fun|self|is|initOf|map|get|as)\b
      - name: keyword.operator
        match: (?<=\s)(<=>|>=|<=|!=|==|\^>>|\~>>|>>|<<|\/%|\^%|\~%|\^\/|\~\/|\+=|-=|\*=|\/=|~\/=|\^\/=|%=|\^%=|<<=|>>=|~>>=|\^>>=|&=|\|=|\^=|\^|=|~|\/|%|-|\*|\+|>|<|&|\||:|\?)(?=\s)
      - name: keyword.other
        match: \b(false|true)\b
  strings:
    name: string.quoted.double.tact
    begin: '"'
    end: '"'
  numeric:
    name: constant.numeric
    match: "{{anyNumber}}"
  comments:
    patterns:
      - name: comment.line
        match: \/\/(.*)
      - name: comment.block
        begin: /\*
        end: \*/
  variables:
    patterns:
      - match: (?!")(`([^`]+)`|((?=_)_|(?={){|(?=})}|(?![_`{}]))([^;,\[\]\(\)\s~.]+))
        name: variable.name
