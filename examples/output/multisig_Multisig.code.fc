#include "multisig_Multisig.stdlib.fc";
#include "multisig_Multisig.storage.fc";

(int, cell, int, int) $__gen_Multisig_init(cell $members, int $totalWeight, int $requiredWeight) impure inline_ref {
    var (($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight)) = (null(), null(), null(), null());
    $self'members = $members;
    $self'requiredWeight = $requiredWeight;
    $self'totalWeight = $totalWeight;
    $self'totalWeight = 0;
    $self'seqno = 0;
    return ($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight);
}

(int, cell, int, int) __gen_load_Multisig() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_Multisig();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (cell members, int totalWeight, int requiredWeight) = $sc~__gen_read_$init$Multisig();
        $sc.end_parse();
        return $__gen_Multisig_init(members, totalWeight, requiredWeight);
    }
}

() __gen_store_Multisig((int, cell, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_Multisig(b, v);
    set_data(b.end_cell());
}

slice $contractAddress((cell, cell) $s) impure inline_ref {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

(cell, cell) $__gen_MultisigSigner_init_child(cell sys', slice $master, cell $members, int $requiredWeight, (slice, slice, int, int, int, int, cell) $request) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: MultisigSigner
    cell mine = __tact_dict_get_code(source, 37817);
    contracts = __tact_dict_set_code(contracts, 37817, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = __gen_write_$init$MultisigSigner(b, ($master, $members, $requiredWeight, $request));
    return (mine, b.end_cell());
}

int $__gen_Multisig_member((int, cell, int, int) $self, slice $address) impure inline_ref {
    var (($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight)) = $self;
    return __tact_dict_get_slice_int($self'members, 267, $address, 257);
}

cell $__gen_Multisig_members((int, cell, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight)) = $self;
    return $self'members;
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$value_to_mode_bounce_code_data(int value, slice to, int mode, int bounce, cell code, cell data) inline {
    return (bounce, to, value, mode, null(), code, data);
}

(((int, cell, int, int)), ()) $__gen_Multisig_receive_Request((int, cell, int, int) $self, (slice, slice, int, int, int, int, cell) $msg) impure inline {
    var ($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight) = $self;
    var ($msg'requested, $msg'to, $msg'value, $msg'timeout, $msg'bounce, $msg'mode, $msg'body) = $msg;
    slice $sender = __tact_context_get_sender();
    int $weight = __tact_not_null(__tact_dict_get_slice_int($self'members, 267, $sender, 257));
    throw_unless(46307, ($weight > 0));
    var ($opInit'code, $opInit'data) = $__gen_MultisigSigner_init_child(__tact_context_sys, my_address(), $self'members, $self'requiredWeight, ($msg'requested, $msg'to, $msg'value, $msg'timeout, $msg'bounce, $msg'mode, $msg'body));
    slice $opAddress = $contractAddress(($opInit'code, $opInit'data));
    $send(__gen_constructor_SendParameters$value_to_mode_bounce_code_data(0, $opAddress, (64 + 2), true, $opInit'code, $opInit'data));
    return (($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight), ());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

(((int, cell, int, int)), ()) $__gen_Multisig_receive_Signed((int, cell, int, int) $self, ((slice, slice, int, int, int, int, cell)) $msg) impure inline {
    var ($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight) = $self;
    var (($msg'request'requested, $msg'request'to, $msg'request'value, $msg'request'timeout, $msg'request'bounce, $msg'request'mode, $msg'request'body)) = $msg;
    slice $sender = __tact_context_get_sender();
    var ($opInit'code, $opInit'data) = $__gen_MultisigSigner_init_child(__tact_context_sys, my_address(), $self'members, $self'requiredWeight, ($msg'request'requested, $msg'request'to, $msg'request'value, $msg'request'timeout, $msg'request'bounce, $msg'request'mode, $msg'request'body));
    slice $opAddress = $contractAddress(($opInit'code, $opInit'data));
    throw_unless(4429, __tact_address_eq($opAddress, $sender));
    throw_unless(4755, ($msg'request'timeout > now()));
    $send(__gen_constructor_SendParameters$to_value_mode_bounce_body($msg'request'to, $msg'request'value, $msg'request'mode, $msg'request'bounce, $msg'request'body));
    return (($self'seqno, $self'members, $self'totalWeight, $self'requiredWeight), ());
}

;;
;; Public Interface of a Contract Multisig
;;

((int, cell, int, int), int) __gen_router_Multisig((int, cell, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Request message
    if (op == 4266760323) {
        var msg = in_msg~__gen_read_Request();
        self~$__gen_Multisig_receive_Request(msg);
        return (self, true);
    }
    
    ;; Receive Signed message
    if (op == 2213172633) {
        var msg = in_msg~__gen_read_Signed();
        self~$__gen_Multisig_receive_Signed(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_Multisig();
    
    ;; Handle operation
    int handled = self~__gen_router_Multisig(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_Multisig(self);
}

_ %member(slice $$address) method_id(70789) {
    slice $address = __tact_verify_address($$address);
    var self = __gen_load_Multisig();
    var res = $__gen_Multisig_member(self, $address);
    return res;
}

_ %members() method_id(104769) {
    var self = __gen_load_Multisig();
    var res = $__gen_Multisig_members(self);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmesM8zqFn7mazJQxmvY8EhXtZ1SQn1WGPnf2Vn6jatvuB";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
