;; __tact_address_eq
int __tact_address_eq(slice a, slice b) inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; $ChangeOwner$_load
(slice, ((slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_value_to_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_body(int value, slice to, int mode, cell body) inline;

;; $Treasure$_contract_init
(slice) $Treasure$_contract_init(slice $owner) impure inline_ref;

;; $Treasure$_contract_load
(slice) $Treasure$_contract_load() impure inline;

;; $Treasure$_contract_store
() $Treasure$_contract_store((slice) v) impure inline;

;; $Treasure$_fun_doWithdraw
((slice), ()) $Treasure$_fun_doWithdraw((slice) $self, int $amount, int $mode) impure inline_ref;

;; $Treasure$_fun_owner
((slice), slice) $Treasure$_fun_owner((slice) $self) impure inline_ref;

;; $Treasure$_fun_requireOwner
((slice), ()) $Treasure$_fun_requireOwner((slice) $self) impure inline_ref;

;; $Treasure$_load
(slice, ((slice))) $Treasure$_load(slice sc_0) inline;

;; $Treasure$_store
builder $Treasure$_store(builder build_0, (slice) v) inline;

;; $Treasure$init$_load
(slice, ((slice))) $Treasure$init$_load(slice sc_0) inline;

;; $Withdraw$_load
(slice, ((int, int))) $Withdraw$_load(slice sc_0) inline;
