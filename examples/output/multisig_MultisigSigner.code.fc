#include "multisig_MultisigSigner.stdlib.fc";
#include "multisig_MultisigSigner.storage.fc";

(slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) $__gen_MultisigSigner_init(slice $master, cell $members, int $requiredWeight, (slice, slice, int, int, int, int, cell) $request) impure inline_ref {
    var (($request'requested, $request'to, $request'value, $request'timeout, $request'bounce, $request'mode, $request'body)) = $request;
    var (($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body))) = (null(), null(), 0, null(), null(), null());
    $self'master = $master;
    $self'members = $members;
    $self'requiredWeight = $requiredWeight;
    $self'completed = false;
    ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body) = ($request'requested, $request'to, $request'value, $request'timeout, $request'bounce, $request'mode, $request'body);
    return ($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body));
}

(slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) __gen_load_MultisigSigner() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_MultisigSigner();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice master, cell members, int requiredWeight, (slice, slice, int, int, int, int, cell) request) = $sc~__gen_read_$init$MultisigSigner();
        $sc.end_parse();
        return $__gen_MultisigSigner_init(master, members, requiredWeight, request);
    }
}

() __gen_store_MultisigSigner((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_MultisigSigner(b, v);
    set_data(b.end_cell());
}

(slice, slice, int, int, int, int, cell) $__gen_MultisigSigner_request((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) $self) impure inline_ref {
    var (($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body))) = $self;
    return ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body);
}

(((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell))), ()) $__gen_MultisigSigner_receive((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) $self) impure inline {
    var ($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body)) = $self;
    return (($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body)), ());
}

(((slice, slice, int, int, int, int, cell))) __gen_constructor_Signed$request((slice, slice, int, int, int, int, cell) request) inline {
    return (request);
}

((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)), ()) $__gen_MultisigSigner_receive_comment_22aee6d0a6dc146577277dd58d06ae3090a3cdd3d8a88561184208ae5f6eb039((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) $self) impure inline {
    var ($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body)) = $self;
    throw_unless(4755, ($self'request'timeout > now()));
    throw_unless(40810, (~ $self'completed));
    slice $sender = __tact_context_get_sender();
    int $weight = __tact_not_null(__tact_dict_get_slice_int($self'members, 267, $sender, 257));
    $self'members~__tact_dict_set_slice_int(267, $sender, null(), 257);
    $self'weight = ($self'weight + $weight);
    if (($self'weight >= $self'requiredWeight)) {
        $self'completed = true;
        $send(__gen_constructor_SendParameters$value_to_mode_bounce_body(0, $self'master, (128 + 2), false, __gen_writecell_Signed(__gen_constructor_Signed$request(($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body)))));
    }
    return (($self'master, $self'members, $self'weight, $self'requiredWeight, $self'completed, ($self'request'requested, $self'request'to, $self'request'value, $self'request'timeout, $self'request'bounce, $self'request'mode, $self'request'body)), ());
}

;;
;; Public Interface of a Contract MultisigSigner
;;

((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)), int) __gen_router_MultisigSigner((slice, cell, int, int, int, (slice, slice, int, int, int, int, cell)) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~$__gen_MultisigSigner_receive();
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "YES" message
        if (text_op == 0x22aee6d0a6dc146577277dd58d06ae3090a3cdd3d8a88561184208ae5f6eb039) {
            self~$__gen_MultisigSigner_receive_comment_22aee6d0a6dc146577277dd58d06ae3090a3cdd3d8a88561184208ae5f6eb039();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_MultisigSigner();
    
    ;; Handle operation
    int handled = self~__gen_router_MultisigSigner(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_MultisigSigner(self);
}

_ %request() method_id(107262) {
    var self = __gen_load_MultisigSigner();
    var res = $__gen_MultisigSigner_request(self);
    return __gen_Request_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmUFsGQE6VCxREmmb7qoPx758xaju7ukVYgLSwMfTT5AcJ";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
