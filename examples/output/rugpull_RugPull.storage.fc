;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode(int value, slice to, int mode) inline {
    return (true, to, value, mode, null(), null(), null());
}

;;
;; Type: ChangeOwner
;; Header: 0x0f474d03
;; TLB: change_owner#0f474d03 newOwner:address = ChangeOwner
;;

(slice, ((slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 256331011);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'newOwner));
}

;;
;; Type: RugParams
;; TLB: _ investment:int257 returns:int257 fee:int257 = RugParams
;;

(int, int, int) $RugParams$_to_external(((int, int, int)) v) inline {
    var (v'investment, v'returns, v'fee) = v; 
    return (v'investment, v'returns, v'fee);
}

((int, int, int)) $RugParams$_constructor_investment_returns_fee(int investment, int returns, int fee) inline {
    return (investment, returns, fee);
}

;;
;; Type: RugPull
;;

builder $RugPull$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, cell) v) inline {
    var (v'owner, v'investment, v'returns, v'fee, v'balance, v'rugpulled, v'stopped, v'queueStart, v'queueEnd, v'queue) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'investment, 257);
    build_0 = build_0.store_int(v'returns, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'fee, 257);
    build_1 = build_1.store_int(v'balance, 257);
    build_1 = build_1.store_int(v'rugpulled, 1);
    build_1 = build_1.store_int(v'stopped, 1);
    build_1 = build_1.store_int(v'queueStart, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'queueEnd, 257);
    build_2 = build_2.store_dict(v'queue);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, int, int, int, int, int, int, int, cell))) $RugPull$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'investment = sc_0~load_int(257);
    var v'returns = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'fee = sc_1~load_int(257);
    var v'balance = sc_1~load_int(257);
    var v'rugpulled = sc_1~load_int(1);
    var v'stopped = sc_1~load_int(1);
    var v'queueStart = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'queueEnd = sc_2~load_int(257);
    var v'queue = sc_2~load_dict();
    return (sc_0, (v'owner, v'investment, v'returns, v'fee, v'balance, v'rugpulled, v'stopped, v'queueStart, v'queueEnd, v'queue));
}

(slice, ((slice, int, int, int))) $RugPull$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'investment = sc_0~load_int(257);
    var v'returns = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'fee = sc_1~load_int(257);
    return (sc_0, (v'owner, v'investment, v'returns, v'fee));
}

(slice, int, int, int, int, int, int, int, int, cell) $RugPull$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$RugPull$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int investment, int returns, int fee) = $sc~$RugPull$init$_load();
        $sc.end_parse();
        return $RugPull$_contract_init(owner, investment, returns, fee);
    }
}

() $RugPull$_contract_store((slice, int, int, int, int, int, int, int, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $RugPull$_store(b, v);
    set_data(b.end_cell());
}