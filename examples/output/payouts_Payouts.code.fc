#include "payouts_Payouts.stdlib.fc";
#include "payouts_Payouts.constants.fc";
#include "payouts_Payouts.storage.fc";

(slice, int) $Payouts$_contract_init(slice $owner, int $publicKey) impure inline_ref {
    var (($self'owner, $self'publicKey)) = (null(), null());
    $self'owner = $owner;
    $self'publicKey = $publicKey;
    return ($self'owner, $self'publicKey);
}

(slice, int) $Payouts$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Payouts$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int publicKey) = $sc~$Payouts$init$_load();
        $sc.end_parse();
        return $Payouts$_contract_init(owner, publicKey);
    }
}

() $Payouts$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Payouts$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $Beacon$_init_child(cell sys', slice $master, slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Beacon
    cell mine = __tact_dict_get_code(source, 41210);
    contracts = __tact_dict_set_code(contracts, 41210, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Beacon$init$_store(b, ($master, $owner));
    return (mine, b.end_cell());
}

((slice, int), ()) $Payouts$_fun_requireOwner((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'publicKey)) = $self;
    throw_unless(132, __tact_address_eq(__tact_context_get_sender(), $self'owner));
    return (($self'owner, $self'publicKey), ());
}

slice $Payouts$_fun_owner((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'publicKey)) = $self;
    return $self'owner;
}

((int)) $CanPayout$_constructor_amount(int amount) inline {
    return (amount);
}

;;
;; Receivers of a Contract Payouts
;;

((slice, int), ()) $Payouts$_receive_any_text((slice, int) $self, slice $msg) impure inline {
    var ($self'owner, $self'publicKey) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(16059, ($ctx'value >= 1000000000));
    slice $data = $String$_fun_fromBase64($msg);
    int $amount = $data~load_coins();
    slice $signature = $data~load_bits(512);
    builder $dataToSign = begin_cell();
    $dataToSign = __tact_store_address($dataToSign, $ctx'sender);
    $dataToSign = store_coins($dataToSign, $amount);
    int $hash = cell_hash($Builder$_fun_asCell($dataToSign));
    throw_unless(48401, check_signature($hash, $signature, $self'publicKey));
    var ($init'code, $init'data) = $Beacon$_init_child(__tact_context_sys, my_address(), $ctx'sender);
    slice $address = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($address, 0, (64 + 2), true, $CanPayout$_store_cell($CanPayout$_constructor_amount($amount))));
    return (($self'owner, $self'publicKey), ());
}

(((slice, int)), ()) $Payouts$_receive_binary_CanPayoutResponse((slice, int) $self, (int, slice, int) $msg) impure inline {
    var ($self'owner, $self'publicKey) = $self;
    var ($msg'amount, $msg'address, $msg'ok) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    var ($init'code, $init'data) = $Beacon$_init_child(__tact_context_sys, my_address(), $msg'address);
    slice $address = $global_contractAddress(($init'code, $init'data));
    throw_unless(4429, __tact_address_eq($ctx'sender, $address));
    if ($msg'ok) {
        throw_unless(62972, ((((__tact_my_balance() - $ctx'value) - 1000000000) - $msg'amount) > 0));
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'address, $msg'amount, (64 + 2), false, $String$_fun_asComment(__gen_str_3364490128())));
    } else {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'address, 0, (64 + 2), false, $String$_fun_asComment(__gen_str_2620117026())));
    }
    return (($self'owner, $self'publicKey), ());
}

(((slice, int)), ()) $Payouts$_receive_binary_ChangeOwner((slice, int) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'publicKey) = $self;
    var ($msg'newOwner) = $msg;
    ($self'owner, $self'publicKey)~$Payouts$_fun_requireOwner();
    $self'owner = $msg'newOwner;
    return (($self'owner, $self'publicKey), ());
}

;;
;; Get methods of a Contract Payouts
;;

_ %owner() method_id(83229) {
    var self = $Payouts$_contract_load();
    var res = $Payouts$_fun_owner(self);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable.transferable"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmT8RutpPVeLYb437npt1Xu5FKvGwSAWA8s4Y746BX1CF5";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Payouts
;;

((slice, int), int) $Payouts$_contract_router((slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive CanPayoutResponse message
    if (op == 4293607646) {
        var msg = in_msg~$CanPayoutResponse$_load();
        self~$Payouts$_receive_binary_CanPayoutResponse(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 256331011) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$Payouts$_receive_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        if (slice_bits(in_msg) >= 32) {
            self~$Payouts$_receive_any_text(in_msg.skip_bits(32));
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Payouts$_contract_load();
    
    ;; Handle operation
    int handled = self~$Payouts$_contract_router(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $Payouts$_contract_store(self);
}
