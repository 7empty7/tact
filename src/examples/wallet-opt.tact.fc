global (int, slice, int) __tact_context;

(slice, (slice, slice)) __gen_read_TransferMessage(slice sc) inline {
    throw_unless(100, sc~load_uint(32) == 1843760589);
    var signature = sc~load_bits(512);
    var transfer = sc;
    return (sc, (signature, transfer));
}

builder __gen_write_Wallet(builder build_0, int v'seqno, int v'key, int v'walletId) inline {
    build_0 = store_uint(build_0, v'seqno, 32);
    build_0 = store_uint(build_0, v'key, 256);
    build_0 = store_uint(build_0, v'walletId, 64);
    return build_0;
}

cell __gen_writecell_Wallet(int v'seqno,int v'key,int v'walletId) inline {
    return __gen_write_Wallet(begin_cell(), v'seqno, v'key, v'walletId).end_cell();
}

(slice, (int, int, int)) __gen_read_Wallet(slice sc) inline {
    var seqno = sc~load_uint(32);
    var key = sc~load_uint(256);
    var walletId = sc~load_uint(64);
    return (sc, (seqno, key, walletId));
}

(int, int, int) __gen_load_Wallet() inline {
    slice sc = get_data().begin_parse();
    return sc~__gen_read_Wallet();
}

() __gen_store_Wallet(int v'seqno, int v'key, int v'walletId) impure inline {
    builder b = begin_cell();
    b = __gen_write_Wallet(b, v'seqno,v'key,v'walletId);
    set_data(b.end_cell());
}

cell __gen_Wallet_init(int key, int walletId) inline {
    var (int self'seqno, int self'key, int self'walletId) = (0, null(), null());
    self'key = key;
    self'walletId = walletId;
    return __gen_writecell_Wallet(self'seqno, self'key, self'walletId);
}

int __gen_Wallet_publicKey((int, int, int) self) impure inline {
    var (int self'seqno, int self'key, int self'walletId) = self;
    return self'key;
}

_ __gen_get_publicKey() method_id(86520) {
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    var res = __gen_Wallet_publicKey(self'seqno, self'key, self'walletId);
    return res;
}

int __gen_Wallet_walletId((int, int, int) self) impure inline {
    var (int self'seqno, int self'key, int self'walletId) = self;
    return self'walletId;
}

_ __gen_get_walletId() method_id(114762) {
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    var res = __gen_Wallet_walletId(self'seqno, self'key, self'walletId);
    return res;
}

int __gen_Wallet_seqno((int, int, int) self) impure inline {
    var (int self'seqno, int self'key, int self'walletId) = self;
    return self'seqno;
}

_ __gen_get_seqno() method_id(85143) {
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    var res = __gen_Wallet_seqno(self'seqno, self'key, self'walletId);
    return res;
}

((int, int, int), ()) __gen_Wallet_receive_TransferMessage((int, int, int) self, slice msg'signature, slice msg'transfer) impure inline {
    var (self'seqno, self'key, self'walletId) = self;
    int op_hash = slice_hash(msg'transfer);
    throw_unless(42, check_signature(op_hash, msg'signature, self'key));
    slice pkg = msg'transfer;
    int seqno = pkg~load_int(32);
    int mode = pkg~load_int(8);
    cell body = pkg~load_ref();
    throw_unless(43, (seqno == self'seqno));
    self'seqno = (self'seqno + 1);
    send_raw_message(body, mode);
    return ((self'seqno, self'key, self'walletId), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value);
    
    ;; Receivers
    if (op == 1843760589) {
        var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
        var (slice msg'signature, slice msg'transfer) = in_msg~__gen_read_TransferMessage();
        (self'seqno, self'key, self'walletId)~__gen_Wallet_receive_TransferMessage(msg'signature, msg'transfer);
        __gen_store_Wallet(self'seqno, self'key, self'walletId);
        return ();
    }
    
    throw(100);
}

cell init_Wallet(int key, int walletId) method_id {
    return __gen_Wallet_init(key, walletId);
}