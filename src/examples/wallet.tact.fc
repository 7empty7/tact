forall X -> tuple __tact_set(tuple x, X v, int i) asm "SETINDEXVARQ";

forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

forall X -> tuple __tact_to_tuple(X x) impure asm "NOP";

forall X -> X __tact_from_tuple(tuple x) impure asm "NOP";

builder __gen_write_Transfer(builder build_0, tuple v) impure {
    var [v_0, v_1, v_2, v_3, v_4] = __tact_from_tuple(v);
    build_0 = store_uint(build_0, v_0, 32);
    build_0 = store_uint(build_0, v_1, 8);
    build_0 = __tact_store_address(build_0, v_2);
    build_0 = store_coins(build_0, v_3);
    if (null?(v_4)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_ref(build_0, v_4);
    }
    return build_0;
}

cell __gen_writecell_Transfer(tuple v) impure {
    return __gen_write_Transfer(begin_cell(), v).end_cell();
}

(slice, tuple) __gen_read_Transfer(slice sc) impure {
    var __seqno = sc~load_uint(32);
    var __mode = sc~load_uint(8);
    var __to = sc~__tact_load_address();
    var __amount = sc~load_coins();
    var __body = null();
    if (sc~load_int(1)) {
        var __body = sc~load_ref();
    }
    return (sc, __tact_to_tuple([__seqno, __mode, __to, __amount, __body]));
}

(slice, tuple) __gen_read_TransferMessage(slice sc) impure {
    var __signature = sc~load_ref().begin_parse();
    var __transfer = sc~__gen_read_Transfer();
    return (sc, __tact_to_tuple([__signature, __transfer]));
}

builder __gen_write_Wallet(builder build_0, tuple v) impure {
    var [v_0, v_1, v_2] = __tact_from_tuple(v);
    build_0 = store_uint(build_0, v_0, 32);
    build_0 = store_uint(build_0, v_1, 256);
    build_0 = store_uint(build_0, v_2, 64);
    return build_0;
}

cell __gen_writecell_Wallet(tuple v) impure {
    return __gen_write_Wallet(begin_cell(), v).end_cell();
}

(slice, tuple) __gen_read_Wallet(slice sc) impure {
    var __seqno = sc~load_uint(32);
    var __key = sc~load_uint(256);
    var __walletId = sc~load_uint(64);
    return (sc, __tact_to_tuple([__seqno, __key, __walletId]));
}

tuple __gen_load_Wallet() inline {
    slice sc = get_data().begin_parse();
    tuple res = sc~__gen_read_Wallet();
    return res;
}

() __gen_store_Wallet(tuple v) impure {
    builder b = begin_cell();
    b = __gen_write_Wallet(b, v);
    set_data(b.end_cell());
}

() send(tuple params) impure {
    builder b = begin_cell();
    b = store_int(b, 1, 2);
    b = store_int(b, at(params, 0), 1);
    b = store_int(b, 0, 3);
    b = __tact_store_address(b, at(params, 1));
    b = store_coins(b, at(params, 2));
    b = store_int(b, 0, ((((1 + 4) + 4) + 64) + 32));
    b = store_int(b, false, 1);
    cell body = at(params, 4);
    if ((~ null?(body))) {
        b = store_int(b, true, 1);
        b = store_ref(b, __tact_not_null(body));
    } else {
        b = store_int(b, false, 1);
    }
    cell c = end_cell(b);
    send_raw_message(c, at(params, 3));
}

cell __gen_Wallet_init(int key, int walletId) impure {
    tuple self = __tact_to_tuple([0, null(), null()]);
    self = __tact_set(self, key, 1);
    self = __tact_set(self, walletId, 2);
    return __gen_writecell_Wallet(self);
}

(tuple, int) __gen_Wallet_publicKey(tuple self) impure {
    return (self, at(self, 1));
}

_ __gen_get_publicKey() method_id(86520) {
    tuple self = __gen_load_Wallet();
    var res = self~__gen_Wallet_publicKey();
    return res;
}

(tuple, int) __gen_Wallet_walletId(tuple self) impure {
    return (self, at(self, 2));
}

_ __gen_get_walletId() method_id(114762) {
    tuple self = __gen_load_Wallet();
    var res = self~__gen_Wallet_walletId();
    return res;
}

(tuple, int) __gen_Wallet_seqno(tuple self) impure {
    return (self, at(self, 0));
}

_ __gen_get_seqno() method_id(85143) {
    tuple self = __gen_load_Wallet();
    var res = self~__gen_Wallet_seqno();
    return res;
}

(tuple, ()) __gen_Wallet_receive_TransferMessage(tuple self, tuple msg) impure {
    tuple op = at(msg, 1);
    int op_hash = cell_hash(__gen_writecell_Transfer(op));
    throw_unless(42, check_signature(op_hash, at(msg, 0), at(self, 1)));
    throw_unless(43, (at(op, 0) == at(self, 0)));
    self = __tact_set(self, (at(self, 0) + 1), 0);
    send(__tact_to_tuple([true, at(op, 2), at(op, 3), at(op, 1), at(op, 4)]));
    return (self, ());
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    int op = in_msg~load_uint(32);
    tuple self = __gen_load_Wallet();
    if (op == 1843760589) {
        tuple msg = in_msg~__gen_read_TransferMessage();
        self~__gen_Wallet_receive_TransferMessage(msg);
        __gen_store_Wallet(self);
        return ();
    }
    
    throw(100);
}

cell init_Wallet(int key, int walletId) method_id {
    return __gen_Wallet_init(key, walletId);
}