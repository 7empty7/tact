forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

global (int, slice, int) __tact_context;
global cell __tact_context_sys;

(int, slice, int) __tact_context_get() inline { return __tact_context; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

builder __gen_write_Transfer(builder build_0, int v'seqno, int v'mode, slice v'to, int v'amount, cell v'body) inline {
    build_0 = store_uint(build_0, v'seqno, 32);
    build_0 = store_uint(build_0, v'mode, 8);
    build_0 = __tact_store_address(build_0, v'to);
    build_0 = store_coins(build_0, v'amount);
    if (null?(v'body)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_ref(build_0, v'body);
    }
    return build_0;
}

cell __gen_writecell_Transfer(int v'seqno, int v'mode, slice v'to, int v'amount, cell v'body) inline {
    return __gen_write_Transfer(begin_cell(), v'seqno, v'mode, v'to, v'amount, v'body).end_cell();
}

(slice, (int, int, slice, int, cell)) __gen_read_Transfer(slice sc) inline {
    var seqno = sc~load_uint(32);
    var mode = sc~load_uint(8);
    var to = sc~__tact_load_address();
    var amount = sc~load_coins();
    var body = null();
    if (sc~load_int(1)) {
        var body = sc~load_ref();
    }
    return (sc, (seqno, mode, to, amount, body));
}

(slice, (slice, int, int, slice, int, cell)) __gen_read_TransferMessage(slice sc) inline {
    throw_unless(100, sc~load_uint(32) == 123);
    var signature = sc~load_ref().begin_parse();
    var (int transfer'seqno, int transfer'mode, slice transfer'to, int transfer'amount, cell transfer'body) = sc~__gen_read_Transfer();
    return (sc, (signature, transfer'seqno, transfer'mode, transfer'to, transfer'amount, transfer'body));
}

builder __gen_write_Wallet(builder build_0, int v'seqno, int v'key, int v'walletId) inline {
    build_0 = store_uint(build_0, v'seqno, 32);
    build_0 = store_uint(build_0, v'key, 256);
    build_0 = store_uint(build_0, v'walletId, 64);
    return build_0;
}

(slice, (int, int, int)) __gen_read_Wallet(slice sc) inline {
    var seqno = sc~load_uint(32);
    var key = sc~load_uint(256);
    var walletId = sc~load_uint(64);
    return (sc, (seqno, key, walletId));
}

_ __gen_Context_get_bounced(int v'bounced, slice v'sender, int v'value) inline {
    return v'bounced;
}

(int, int, int) __gen_load_Wallet() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_Wallet();
}

() __gen_store_Wallet(int v'seqno, int v'key, int v'walletId) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_Wallet(b, v'seqno,v'key,v'walletId);
    set_data(b.end_cell());
}

() send(int params'bounce, slice params'to, int params'value, int params'mode, cell params'body) impure {
    builder b = begin_cell();
    b = store_int(b, 1, 2);
    b = store_int(b, params'bounce, 1);
    b = store_int(b, 0, 3);
    b = __tact_store_address(b, params'to);
    b = store_coins(b, params'value);
    b = store_int(b, 0, ((((1 + 4) + 4) + 64) + 32));
    b = store_int(b, false, 1);
    cell body = params'body;
    if ((~ null?(body))) {
        b = store_int(b, true, 1);
        b = store_ref(b, __tact_not_null(body));
    } else {
        b = store_int(b, false, 1);
    }
    cell c = end_cell(b);
    send_raw_message(c, params'mode);
}

cell __gen_Wallet_init(cell sys', int key, int walletId) {
    var (int self'seqno, int self'key, int self'walletId) = (0, null(), null());
    self'key = key;
    self'walletId = walletId;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_Wallet(b', self'seqno, self'key, self'walletId);
    return b'.end_cell();
}

int __gen_Wallet_publicKey((int, int, int) self) impure {
    var (int self'seqno, int self'key, int self'walletId) = self;
    return self'key;
}

_ __gen_get_publicKey() method_id(86520) {
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    var res = __gen_Wallet_publicKey(self'seqno, self'key, self'walletId);
    return res;
}

int __gen_Wallet_walletId((int, int, int) self) impure {
    var (int self'seqno, int self'key, int self'walletId) = self;
    return self'walletId;
}

_ __gen_get_walletId() method_id(114762) {
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    var res = __gen_Wallet_walletId(self'seqno, self'key, self'walletId);
    return res;
}

int __gen_Wallet_seqno((int, int, int) self) impure {
    var (int self'seqno, int self'key, int self'walletId) = self;
    return self'seqno;
}

_ __gen_get_seqno() method_id(85143) {
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    var res = __gen_Wallet_seqno(self'seqno, self'key, self'walletId);
    return res;
}

((int, int, int), ()) __gen_Wallet_receive_TransferMessage((int, int, int) self, slice msg'signature, int msg'transfer'seqno, int msg'transfer'mode, slice msg'transfer'to, int msg'transfer'amount, cell msg'transfer'body) impure {
    var (self'seqno, self'key, self'walletId) = self;
    int op_hash = cell_hash(__gen_writecell_Transfer((msg'transfer'seqno, msg'transfer'mode, msg'transfer'to, msg'transfer'amount, msg'transfer'body)));
    throw_unless(42, check_signature(op_hash, msg'signature, self'key));
    throw_unless(43, (msg'transfer'seqno == self'seqno));
    self'seqno = (self'seqno + 1);
    send((true, msg'transfer'to, msg'transfer'amount, msg'transfer'mode, msg'transfer'body));
    return ((self'seqno, self'key, self'walletId), ());
}

((int, int, int), ()) __gen_Wallet_receive_fallback((int, int, int) self, slice Slice) impure {
    var (self'seqno, self'key, self'walletId) = self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        self'seqno = (self'seqno + 1);
    }
    return ((self'seqno, self'key, self'walletId), ());
}

((int, int, int), ()) __gen_Wallet_receive((int, int, int) self) impure {
    var (self'seqno, self'key, self'walletId) = self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        self'seqno = (self'seqno + 1);
    }
    return ((self'seqno, self'key, self'walletId), ());
}

((int, int, int), ()) __gen_Wallet_receive_comment_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2((int, int, int) self) impure {
    var (self'seqno, self'key, self'walletId) = self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        self'seqno = (self'seqno + 1);
    }
    return ((self'seqno, self'key, self'walletId), ());
}

((int, int, int), ()) __gen_Wallet_receive_comment_6727d69765f8f22c75c581e356544397f5a00bb91bd32c4d0d96d4c92684bcc2((int, int, int) self) impure {
    var (self'seqno, self'key, self'walletId) = self;
    if ((~ __gen_Context_get_bounced(__tact_context_get()))) {
        self'seqno = (self'seqno + 1);
    }
    return ((self'seqno, self'key, self'walletId), ());
}

((int, int, int), ()) __gen_Wallet_receive_bounced((int, int, int) self, slice msg) impure {
    var (self'seqno, self'key, self'walletId) = self;
    return ((self'seqno, self'key, self'walletId), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
        (self'seqno, self'key, self'walletId)~__gen_Wallet_receive_bounced(in_msg);
        __gen_store_Wallet(self'seqno, self'key, self'walletId);
        return ();
    }
    
    ;; Receive TransferMessage message
    if (op == 123) {
        var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
        var (slice msg'signature, int msg'transfer'seqno, int msg'transfer'mode, slice msg'transfer'to, int msg'transfer'amount, cell msg'transfer'body) = in_msg~__gen_read_TransferMessage();
        (self'seqno, self'key, self'walletId)~__gen_Wallet_receive_TransferMessage(msg'signature, msg'transfer'seqno, msg'transfer'mode, msg'transfer'to, msg'transfer'amount, msg'transfer'body);
        __gen_store_Wallet(self'seqno, self'key, self'walletId);
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
        (self'seqno, self'key, self'walletId)~__gen_Wallet_receive();
        __gen_store_Wallet(self'seqno, self'key, self'walletId);
        return ();
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "notify" message
        if (text_op == 0x0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2) {
            var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
            (self'seqno, self'key, self'walletId)~__gen_Wallet_receive_comment_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2();
            __gen_store_Wallet(self'seqno, self'key, self'walletId);
            return ();
        }
        
        ;; Receive "слава україни" message
        if (text_op == 0x6727d69765f8f22c75c581e356544397f5a00bb91bd32c4d0d96d4c92684bcc2) {
            var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
            (self'seqno, self'key, self'walletId)~__gen_Wallet_receive_comment_6727d69765f8f22c75c581e356544397f5a00bb91bd32c4d0d96d4c92684bcc2();
            __gen_store_Wallet(self'seqno, self'key, self'walletId);
            return ();
        }
    }
    
    ;; Receiver fallback
    var (int self'seqno, int self'key, int self'walletId) = __gen_load_Wallet();
    (self'seqno, self'key, self'walletId)~__gen_Wallet_receive_fallback(in_msg);
    __gen_store_Wallet(self'seqno, self'key, self'walletId);
}

cell init_Wallet(cell sys', int key, int walletId) method_id {
    return __gen_Wallet_init(sys', key, walletId);
}