cell __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return r;
    } else {
        return idict_set_ref(d, kl, k, begin_cell().store_int(v, vl).end_cell());
    }
}

(slice, (int, int)) __gen_read_Increment(slice sc) {
    var key = sc~load_int(257);
    var value = sc~load_int(257);
    return (sc, (key, value));
}

builder __gen_write_IncrementContract(builder build_0, cell v'counters) impure {
    build_0 = store_dict(build_0, v'counters);
    return build_0;
}

cell __gen_writecell_IncrementContract(cell v'counters) inline {
    return __gen_write_IncrementContract(begin_cell(), v'counters).end_cell();
}

(slice, (cell)) __gen_read_IncrementContract(slice sc) {
    var counters = sc~load_dict();
    return (sc, (counters));
}

_ __gen_Increment_get_key(int v'key, int v'value) inline {
    return v'key;
}

_ __gen_Increment_get_value(int v'key, int v'value) inline {
    return v'value;
}

_ __gen_IncrementContract_get_counters(cell v'counters) inline {
    return v'counters;
}

(cell) __gen_load_IncrementContract() inline {
    slice sc = get_data().begin_parse();
    return sc~__gen_read_IncrementContract();
}

() __gen_store_IncrementContract(cell v'counters) impure {
    builder b = begin_cell();
    b = __gen_write_IncrementContract(b, v'counters);
    set_data(b.end_cell());
}

cell __gen_IncrementContract_init() impure {
    var (cell self'counters) = (null());
    return __gen_writecell_IncrementContract(self'counters);
}

cell __gen_IncrementContract_counters(cell self'counters) impure {
    return __gen_IncrementContract_get_counters((self'counters));
}

_ __gen_get_counters() method_id(95239) {
    var (cell self'counters) = __gen_load_IncrementContract();
    var res = __gen_IncrementContract_counters(self'counters);
    return res;
}

((cell), ()) __gen_IncrementContract_receive_Increment((cell) self, int msg'key,int msg'value) impure {
    var (self'counters) = self;
    self'counters = __tact_dict_set_int_int(__gen_IncrementContract_get_counters((self'counters)), 257, __gen_Increment_get_key((msg'key, msg'value)), __gen_Increment_get_value((msg'key, msg'value)), 257);
    return ((self'counters), ());
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    int op = in_msg~load_uint(32);
    
    if (op == 3615081709) {
        var (cell self'counters) = __gen_load_IncrementContract();
        var (int msg'key, int msg'value) = in_msg~__gen_read_Increment();
        (self'counters)~__gen_IncrementContract_receive_Increment(msg'key, msg'value);
        __gen_store_IncrementContract(self'counters);
        return ();
    }
    
    throw(100);
}

cell init_IncrementContract() method_id {
    return __gen_IncrementContract_init();
}