forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

global (int, slice, int) __tact_context;
global cell __tact_context_sys;

(int, slice, int) __tact_context_get() inline { return __tact_context; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

(slice, ((slice))) __gen_read_ChangeOwner(slice sc) inline {
    throw_unless(100, sc~load_uint(32) == 3067051791);
    var v'newOwner = sc~__tact_load_address();
    return (sc, (v'newOwner));
}

(slice, ((int, int))) __gen_read_Withdraw(slice sc) inline {
    throw_unless(100, sc~load_uint(32) == 1286094280);
    var v'amount = sc~load_coins();
    var v'mode = sc~load_uint(8);
    return (sc, (v'amount, v'mode));
}

builder __gen_write_Treasure(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(slice, ((slice))) __gen_read_Treasure(slice sc) inline {
    var v'owner = sc~__tact_load_address();
    return (sc, (v'owner));
}

_ __gen_Context_get_sender((int, slice, int) v) inline {
    var (v'bounced, v'sender, v'value) = v;
    return v'sender;
}

(slice) __gen_load_Treasure() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_Treasure();
}

() __gen_store_Treasure((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_Treasure(b, v);
    set_data(b.end_cell());
}

() send((int, slice, int, int, cell) params) impure {
    var ((params'bounce, params'to, params'value, params'mode, params'body)) = params;
    builder b = begin_cell();
    b = store_int(b, 1, 2);
    b = store_int(b, params'bounce, 1);
    b = store_int(b, 0, 3);
    b = __tact_store_address(b, params'to);
    b = store_coins(b, params'value);
    b = store_int(b, 0, ((((1 + 4) + 4) + 64) + 32));
    b = store_int(b, false, 1);
    cell body = params'body;
    if ((~ null?(body))) {
        b = store_int(b, true, 1);
        b = store_ref(b, __tact_not_null(body));
    } else {
        b = store_int(b, false, 1);
    }
    cell c = end_cell(b);
    send_raw_message(c, params'mode);
}

cell __gen_Treasure_init(cell sys', slice owner) {
    var ((self'owner)) = (null());
    self'owner = owner;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_Treasure(b', (self'owner));
    return b'.end_cell();
}

((slice), ()) __gen_Treasure_requireOwner((slice) self) impure {
    var ((self'owner)) = self;
    throw_unless(100, __tact_address_eq(__gen_Context_get_sender(__tact_context_get()), self'owner));
    return ((self'owner), ());
}

((slice), ()) __gen_Treasure_doWithdraw((slice) self, int amount, int mode) impure {
    var ((self'owner)) = self;
    (self'owner)~__gen_Treasure_requireOwner();
    send((true, self'owner, amount, mode, end_cell(begin_cell())));
    return ((self'owner), ());
}

slice __gen_Treasure_owner((slice) self) impure {
    var ((self'owner)) = self;
    return self'owner;
}

_ __gen_get_owner() method_id(83229) {
    var self = __gen_load_Treasure();
    var res = __gen_Treasure_owner(self);
    return res;
}

(((slice)), ()) __gen_Treasure_receive_Withdraw((slice) self, (int, int) msg) impure {
    var (self'owner) = self;
    var (msg'amount, msg'mode) = msg;
    (self'owner)~__gen_Treasure_doWithdraw(msg'amount, msg'mode);
    return ((self'owner), ());
}

((slice), ()) __gen_Treasure_receive_comment_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d((slice) self) impure {
    var (self'owner) = self;
    (self'owner)~__gen_Treasure_doWithdraw(0, (32 + 128));
    return ((self'owner), ());
}

(((slice)), ()) __gen_Treasure_receive_ChangeOwner((slice) self, (slice) msg) impure {
    var (self'owner) = self;
    var (msg'newOwner) = msg;
    (self'owner)~__gen_Treasure_requireOwner();
    self'owner = msg'newOwner;
    return ((self'owner), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return ();
    }
    
    ;; Receive Withdraw message
    if (op == 1286094280) {
        var self = __gen_load_Treasure();
        var msg = in_msg~__gen_read_Withdraw();
        self~__gen_Treasure_receive_Withdraw(msg);
        __gen_store_Treasure(self);
        return ();
    }
    
    ;; Receive ChangeOwner message
    if (op == 3067051791) {
        var self = __gen_load_Treasure();
        var msg = in_msg~__gen_read_ChangeOwner();
        self~__gen_Treasure_receive_ChangeOwner(msg);
        __gen_store_Treasure(self);
        return ();
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Destroy" message
        if (text_op == 0x986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d) {
            var self = __gen_load_Treasure();
            self~__gen_Treasure_receive_comment_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d();
            __gen_store_Treasure(self);
            return ();
        }
    }
    
    throw(100);
}

cell init_Treasure(cell sys', slice owner) method_id {
    return __gen_Treasure_init(sys', owner);
}