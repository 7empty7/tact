forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

builder __gen_write_Operation(builder build_0, int v'seqno, int v'amount, slice v'target) impure {
    build_0 = store_uint(build_0, v'seqno, 32);
    build_0 = store_coins(build_0, v'amount);
    build_0 = __tact_store_address(build_0, v'target);
    return build_0;
}

cell __gen_writecell_Operation(int v'seqno,int v'amount,slice v'target) inline {
    return __gen_write_Operation(begin_cell(), v'seqno, v'amount, v'target).end_cell();
}

(slice, (int, int, slice)) __gen_read_Operation(slice sc) {
    var seqno = sc~load_uint(32);
    var amount = sc~load_coins();
    var target = sc~__tact_load_address();
    return (sc, (seqno, amount, target));
}

(slice, (int, int, slice, slice, slice, slice)) __gen_read_Execute(slice sc) {
    var (int operation'seqno, int operation'amount, slice operation'target) = sc~__gen_read_Operation();
    var signature1 = sc~load_ref().begin_parse();
    var signature2 = sc~load_ref().begin_parse();
    var signature3 = sc~load_ref().begin_parse();
    return (sc, (operation'seqno, operation'amount, operation'target, signature1, signature2, signature3));
}

builder __gen_write_MultisigContract(builder build_0, int v'seqno, int v'user1_key, int v'user2_key, int v'user3_key) impure {
    build_0 = store_uint(build_0, v'seqno, 32);
    build_0 = store_uint(build_0, v'user1_key, 256);
    build_0 = store_uint(build_0, v'user2_key, 256);
    build_0 = store_uint(build_0, v'user3_key, 256);
    return build_0;
}

cell __gen_writecell_MultisigContract(int v'seqno,int v'user1_key,int v'user2_key,int v'user3_key) inline {
    return __gen_write_MultisigContract(begin_cell(), v'seqno, v'user1_key, v'user2_key, v'user3_key).end_cell();
}

(slice, (int, int, int, int)) __gen_read_MultisigContract(slice sc) {
    var seqno = sc~load_uint(32);
    var user1_key = sc~load_uint(256);
    var user2_key = sc~load_uint(256);
    var user3_key = sc~load_uint(256);
    return (sc, (seqno, user1_key, user2_key, user3_key));
}

(int, int, int, int) __gen_load_MultisigContract() inline {
    slice sc = get_data().begin_parse();
    return sc~__gen_read_MultisigContract();
}

() __gen_store_MultisigContract(int v'seqno, int v'user1_key, int v'user2_key, int v'user3_key) impure {
    builder b = begin_cell();
    b = __gen_write_MultisigContract(b, v'seqno,v'user1_key,v'user2_key,v'user3_key);
    set_data(b.end_cell());
}

() send(int params'bounce, slice params'to, int params'value, int params'mode, cell params'body) impure {
    builder b = begin_cell();
    b = store_int(b, 1, 2);
    b = store_int(b, params'bounce, 1);
    b = store_int(b, 0, 3);
    b = __tact_store_address(b, params'to);
    b = store_coins(b, params'value);
    b = store_int(b, 0, ((((1 + 4) + 4) + 64) + 32));
    b = store_int(b, false, 1);
    cell body = params'body;
    if ((~ null?(body))) {
        b = store_int(b, true, 1);
        b = store_ref(b, __tact_not_null(body));
    } else {
        b = store_int(b, false, 1);
    }
    cell c = end_cell(b);
    send_raw_message(c, params'mode);
}

cell __gen_MultisigContract_init(int key1, int key2, int key3) impure {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = (0, null(), null(), null());
    self'user1_key = key1;
    self'user2_key = key2;
    self'user3_key = key3;
    return __gen_writecell_MultisigContract(self'seqno, self'user1_key, self'user2_key, self'user3_key);
}

((int, int, int, int), ()) __gen_MultisigContract_execute((int, int, int, int) self, int op'seqno, int op'amount, slice op'target) impure {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = self;
    send((true, op'target, op'amount, 0, null()));
    return ((self'seqno, self'user1_key, self'user2_key, self'user3_key), ());
}

int __gen_MultisigContract_key1((int, int, int, int) self) impure {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = self;
    return self'user1_key;
}

_ __gen_get_key1() method_id(107493) {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = __gen_load_MultisigContract();
    var res = __gen_MultisigContract_key1(self'seqno, self'user1_key, self'user2_key, self'user3_key);
    return res;
}

int __gen_MultisigContract_key2((int, int, int, int) self) impure {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = self;
    return self'user2_key;
}

_ __gen_get_key2() method_id(103302) {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = __gen_load_MultisigContract();
    var res = __gen_MultisigContract_key2(self'seqno, self'user1_key, self'user2_key, self'user3_key);
    return res;
}

int __gen_MultisigContract_key3((int, int, int, int) self) impure {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = self;
    return self'user3_key;
}

_ __gen_get_key3() method_id(99239) {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = __gen_load_MultisigContract();
    var res = __gen_MultisigContract_key3(self'seqno, self'user1_key, self'user2_key, self'user3_key);
    return res;
}

int __gen_MultisigContract_seqno((int, int, int, int) self) impure {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = self;
    return self'seqno;
}

_ __gen_get_seqno() method_id(85143) {
    var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = __gen_load_MultisigContract();
    var res = __gen_MultisigContract_seqno(self'seqno, self'user1_key, self'user2_key, self'user3_key);
    return res;
}

((int, int, int, int), ()) __gen_MultisigContract_receive_Execute((int, int, int, int) self, int msg'operation'seqno, int msg'operation'amount, slice msg'operation'target, slice msg'signature1, slice msg'signature2, slice msg'signature3) impure {
    var (self'seqno, self'user1_key, self'user2_key, self'user3_key) = self;
    int op_hash = cell_hash(__gen_writecell_Operation((msg'operation'seqno, msg'operation'amount, msg'operation'target)));
    int ok1 = check_signature(op_hash, msg'signature1, self'user1_key);
    int ok2 = check_signature(op_hash, msg'signature2, self'user2_key);
    int ok3 = check_signature(op_hash, msg'signature3, self'user3_key);
    throw_unless(10, (msg'operation'seqno == self'seqno));
    throw_unless(10, ((ok1 & ok2) & ok3));
    (self'seqno, self'user1_key, self'user2_key, self'user3_key)~__gen_MultisigContract_execute((msg'operation'seqno, msg'operation'amount, msg'operation'target));
    return ((self'seqno, self'user1_key, self'user2_key, self'user3_key), ());
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    int op = in_msg~load_uint(32);
    
    if (op == 819865922) {
        var (int self'seqno, int self'user1_key, int self'user2_key, int self'user3_key) = __gen_load_MultisigContract();
        var (int msg'operation'seqno, int msg'operation'amount, slice msg'operation'target, slice msg'signature1, slice msg'signature2, slice msg'signature3) = in_msg~__gen_read_Execute();
        (self'seqno, self'user1_key, self'user2_key, self'user3_key)~__gen_MultisigContract_receive_Execute(msg'operation'seqno, msg'operation'amount, msg'operation'target, msg'signature1, msg'signature2, msg'signature3);
        __gen_store_MultisigContract(self'seqno, self'user1_key, self'user2_key, self'user3_key);
        return ();
    }
    
    throw(100);
}

cell init_MultisigContract(int key1, int key2, int key3) method_id {
    return __gen_MultisigContract_init(key1, key2, key3);
}