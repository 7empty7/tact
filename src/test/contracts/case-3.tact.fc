(slice, (int, int)) __gen_read_Source(slice sc) {
    var a = sc~load_int(257);
    var b = sc~load_int(257);
    return (sc, (a, b));
}

(slice, (int, int, int, int)) __gen_read_SampleContract(slice sc) {
    var a = sc~load_int(257);
    var b = sc~load_int(257);
    sc = (sc~load_ref()).begin_parse();
    var (int c'a, int c'b) = sc~__gen_read_Source();
    return (sc, (a, b, c'a, c'b));
}

_ __gen_SampleContract_get_a(int v'a, int v'b, int v'c'a, int v'c'b) inline {
    return v'a;
}

(int, int, int, int) __gen_load_SampleContract() inline {
    slice sc = get_data().begin_parse();
    return sc~__gen_read_SampleContract();
}

int __gen_SampleContract_stake(int self'a, int self'b, int self'c'a, int self'c'b) impure {
    return __gen_SampleContract_get_a((self'a, self'b, self'c'a, self'c'b));
}

_ __gen_get_stake() method_id(80984) {
    var (int self'a, int self'b, int self'c'a, int self'c'b) = __gen_load_SampleContract();
    var res = __gen_SampleContract_stake(self'a, self'b, self'c'a, self'c'b);
    return res;
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    int op = in_msg~load_uint(32);
    
    
    throw(100);
}