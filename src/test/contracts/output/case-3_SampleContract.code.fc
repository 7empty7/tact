#include "case-3_SampleContract.stdlib.fc";
#include "case-3_SampleContract.storage.fc";

((int, int)) $Source$_constructor_a_b(int a, int b) inline {
    return (a, b);
}

(int, int, (int, int)) $SampleContract$_contract_init() impure inline_ref {
    var (($self'a, $self'b, ($self'c'a, $self'c'b))) = (null(), null(), null());
    $self'a = 0;
    $self'b = 0;
    ($self'c'a, $self'c'b) = $Source$_constructor_a_b(0, 0);
    return ($self'a, $self'b, ($self'c'a, $self'c'b));
}

(int, int, (int, int)) $SampleContract$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SampleContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SampleContract$_contract_init();
    }
}

() $SampleContract$_contract_store((int, int, (int, int)) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $SampleContract$_store(b, v);
    set_data(b.end_cell());
}

int $SampleContract$_fun_stake((int, int, (int, int)) $self) impure inline_ref {
    var (($self'a, $self'b, ($self'c'a, $self'c'b))) = $self;
    return $self'a;
}

;;
;; Receivers of a Contract SampleContract
;;

;;
;; Get methods of a Contract SampleContract
;;

_ %stake() method_id(80984) {
    var self = $SampleContract$_contract_load();
    var res = $SampleContract$_fun_stake(self);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmZ4jMr1yeWJpxRQ2Xzpontxtks3c7RJzTGcZ2v9GrKUy2";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleContract
;;

((int, int, (int, int)), int) $SampleContract$_contract_router((int, int, (int, int)) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleContract$_contract_router(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $SampleContract$_contract_store(self);
}
