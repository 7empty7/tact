builder __gen_write_StdlibTest(builder build_0, int v'v) inline {
    build_0 = store_int(build_0, v'v, 257);
    return build_0;
}

cell __gen_writecell_StdlibTest(int v'v) inline {
    return __gen_write_StdlibTest(begin_cell(), v'v).end_cell();
}

(slice, (int)) __gen_read_StdlibTest(slice sc) inline {
    var v = sc~load_int(257);
    return (sc, (v));
}

(int) __gen_load_StdlibTest() inline {
    slice sc = get_data().begin_parse();
    return sc~__gen_read_StdlibTest();
}

cell __gen_StdlibTest_init() inline {
    var (int self'v) = (0);
    return __gen_writecell_StdlibTest(self'v);
}

int __gen_StdlibTest_sliceEmpty((int) self, slice sc) impure inline {
    var (int self'v) = self;
    return slice_empty?(sc);
}

_ __gen_get_sliceEmpty(slice sc) method_id(73995) {
    var (int self'v) = __gen_load_StdlibTest();
    var res = __gen_StdlibTest_sliceEmpty(self'v, sc);
    return res;
}

int __gen_StdlibTest_sliceBits((int) self, slice sc) impure inline {
    var (int self'v) = self;
    return slice_bits(sc);
}

_ __gen_get_sliceBits(slice sc) method_id(75090) {
    var (int self'v) = __gen_load_StdlibTest();
    var res = __gen_StdlibTest_sliceBits(self'v, sc);
    return res;
}

int __gen_StdlibTest_sliceRefs((int) self, slice sc) impure inline {
    var (int self'v) = self;
    return slice_refs(sc);
}

_ __gen_get_sliceRefs(slice sc) method_id(77445) {
    var (int self'v) = __gen_load_StdlibTest();
    var res = __gen_StdlibTest_sliceRefs(self'v, sc);
    return res;
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Receivers
    
    throw(100);
}

cell init_StdlibTest() method_id {
    return __gen_StdlibTest_init();
}