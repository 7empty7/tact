;;
;; Type: DDDD
;;

builder $DDDD$_store(builder build_0, (slice, slice, slice, cell, cell) v) inline {
    var (v'addr1, v'addr2, v'addr3, v'mapData, v'mapData2) = v;
    build_0 = __tact_store_address(build_0, v'addr1);
    build_0 = __tact_store_address(build_0, v'addr2);
    build_0 = __tact_store_address(build_0, v'addr3);
    build_0 = build_0.store_dict(v'mapData);
    build_0 = build_0.store_dict(v'mapData2);
    return build_0;
}

(slice, ((slice, slice, slice, cell, cell))) $DDDD$_load(slice sc_0) inline {
    var v'addr1 = sc_0~__tact_load_address();
    var v'addr2 = sc_0~__tact_load_address();
    var v'addr3 = sc_0~__tact_load_address();
    var v'mapData = sc_0~load_dict();
    var v'mapData2 = sc_0~load_dict();
    return (sc_0, (v'addr1, v'addr2, v'addr3, v'mapData, v'mapData2));
}

(slice, ((slice, slice, slice))) $DDDD$init$_load(slice sc_0) inline {
    var v'addr1 = sc_0~__tact_load_address();
    var v'addr2 = sc_0~__tact_load_address();
    var v'addr3 = sc_0~__tact_load_address();
    return (sc_0, (v'addr1, v'addr2, v'addr3));
}

(slice, slice, slice, cell, cell) $DDDD$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$DDDD$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice addr1, slice addr2, slice addr3) = $sc~$DDDD$init$_load();
        $sc.end_parse();
        return $DDDD$_contract_init(addr1, addr2, addr3);
    }
}

() $DDDD$_contract_store((slice, slice, slice, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $DDDD$_store(b, v);
    set_data(b.end_cell());
}