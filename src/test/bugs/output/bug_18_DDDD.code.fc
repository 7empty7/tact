#include "bug_18_DDDD.headers.fc";
#include "bug_18_DDDD.stdlib.fc";
#include "bug_18_DDDD.storage.fc";

;;
;; Contract DDDD functions
;;

(slice, slice, slice, cell, cell) $DDDD$_contract_init(slice $addr1, slice $addr2, slice $addr3) impure inline_ref {
    var (($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2)) = (null(), null(), null(), null(), null());
    $self'addr1 = $addr1;
    $self'addr2 = $addr2;
    $self'addr3 = $addr3;
    return ($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2);
}

((slice, slice, slice, cell, cell), slice) $DDDD$_fun_mapData_addr1((slice, slice, slice, cell, cell) $self, int $key) impure inline {
    var (($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2)) = $self;
    return (($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2), __tact_dict_get_int_slice($self'mapData, 257, $key));
}

((slice, slice, slice, cell, cell), int) $DDDD$_fun_mapData2_addr1((slice, slice, slice, cell, cell) $self, slice $key) impure inline {
    var (($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2)) = $self;
    return (($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2), __tact_dict_get_slice_int($self'mapData2, 267, $key, 257));
}

;;
;; Receivers of a Contract DDDD
;;

(((slice, slice, slice, cell, cell)), ()) %$DDDD$_receive_empty((slice, slice, slice, cell, cell) $self) impure inline {
    var ($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2) = $self;
    $self'mapData~__tact_dict_set_int_slice(257, 0, $self'addr1);
    $self'mapData~__tact_dict_set_int_slice(257, 1, $self'addr2);
    $self'mapData~__tact_dict_set_int_slice(257, 2, $self'addr3);
    $self'mapData~__tact_dict_set_int_slice(257, 3, $self'addr1);
    $self'mapData2~__tact_dict_set_slice_int(267, $self'addr1, 0, 257);
    $self'mapData2~__tact_dict_set_slice_int(267, $self'addr2, 1, 257);
    $self'mapData2~__tact_dict_set_slice_int(267, $self'addr3, 2, 257);
    $self'mapData2~__tact_dict_set_slice_int(267, $self'addr1, 3, 257);
    return (($self'addr1, $self'addr2, $self'addr3, $self'mapData, $self'mapData2), ());
}

;;
;; Get methods of a Contract DDDD
;;

_ %mapData_addr1(int $$key) method_id(120259) {
    int $key = $$key;
    var self = $DDDD$_contract_load();
    var res = self~$DDDD$_fun_mapData_addr1($key);
    return res;
}

_ %mapData2_addr1(slice $$key) method_id(66206) {
    slice $key = __tact_verify_address($$key);
    var self = $DDDD$_contract_load();
    var res = self~$DDDD$_fun_mapData2_addr1($key);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmenqnpKSx5kerDStpCCNQXFVuC7fMSJaotzPRtUgrR4Zw";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract DDDD
;;

((slice, slice, slice, cell, cell), int) $DDDD$_contract_router((slice, slice, slice, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$DDDD$_receive_empty();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $DDDD$_contract_load();
    
    ;; Handle operation
    int handled = self~$DDDD$_contract_router(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $DDDD$_contract_store(self);
}
