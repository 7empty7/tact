#include "strings_StringsTester.stdlib.fc";

tuple $__gen_StringsTester_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

tuple __gen_load_StringsTester() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $__gen_StringsTester_init();
    }
}

() __gen_store_StringsTester(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;; String "test string"
slice __gen_str_3579288646() asm "B{b5ee9c7241010101000d0000167465737420737472696e67ee608f50} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_3070532033() asm "B{b5ee9c7241010101001a000030d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d8d539ad} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€ Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_3872846997() asm "B{b5ee9c72410206010002fa0001fed0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f918020d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b80101fed0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d182200201fed0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d180200301fef09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd10401fe80d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b50500dcd18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0918e6a} B>boc <s PUSHSLICE";

;; String "Hello!"
slice __gen_str_860684655() asm "B{b5ee9c7241010101000800000c48656c6c6f21a44219b3} B>boc <s PUSHSLICE";

;; String "Something something world!"
slice __gen_str_2498516892() asm "B{b5ee9c7241010101001c000034536f6d657468696e6720736f6d657468696e6720776f726c64212a90ca7f} B>boc <s PUSHSLICE";

;; String "Hello, your balance: "
slice __gen_str_519161862() asm "B{b5ee9c7241010101001700002a48656c6c6f2c20796f75722062616c616e63653a201d628127} B>boc <s PUSHSLICE";

;; String "TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcmsu"
slice __gen_str_1560934365() asm "B{b5ee9c72410101010026000048545746756553426f5957356b637942745957746c494778705a32683049486476636d7375ff762436} B>boc <s PUSHSLICE";

slice $__gen_Builder_asSlice(builder $self) impure inline_ref {
    var ($self) = $self;
    return begin_parse(end_cell($self));
}

slice $__gen_Slice_fromBase64(slice $self) impure inline_ref {
    var ($self) = $self;
    int $size = (slice_bits($self) / 8);
    builder $result = begin_cell();
    repeat ($size) {
        int $code = $self~load_uint(8);
        if ((($code >= 65) & ($code <= 90))) {
            $result = store_uint($result, ($code - 65), 6);
        } elseif ((($code >= 97) & ($code <= 122))) {
            $result = store_uint($result, ($code - (97 - 26)), 6);
        } elseif ((($code >= 48) & ($code <= 57))) {
            $result = store_uint($result, ($code + (52 - 48)), 6);
        } elseif ((($code == 45) | ($code == 43))) {
            $result = store_uint($result, 62, 6);
        } elseif ((($code == 95) | ($code == 47))) {
            $result = store_uint($result, 63, 6);
        } elseif (($code == 61)) {
        } else {
            throw(134);
        }
    }
    int $total = builder_bits($result);
    int $padding = ($total % 8);
    if (($padding != 0)) {
        slice $s = $__gen_Builder_asSlice($result);
        return $s~load_bits(($total - $padding));
    } else {
        return $__gen_Builder_asSlice($result);
    }
}

slice $__gen_String_fromBase64(slice $self) impure inline_ref {
    var ($self) = $self;
    return $__gen_Slice_fromBase64(__tact_str_to_slice($self));
}

slice $__gen_StringsTester_constantString(tuple $self) impure inline_ref {
    var ($self) = $self;
    return __gen_str_3579288646();
}

slice $__gen_StringsTester_constantStringUnicode(tuple $self) impure inline_ref {
    var ($self) = $self;
    return __gen_str_3070532033();
}

slice $__gen_StringsTester_constantStringUnicodeLong(tuple $self) impure inline_ref {
    var ($self) = $self;
    return __gen_str_3872846997();
}

cell $__gen_StringsTester_dynamicStringCell(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_860684655());
    return __tact_string_builder_end($b);
}

cell $__gen_StringsTester_dynamicCommentCell(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append(__gen_str_2498516892());
    return __tact_string_builder_end($b);
}

cell $__gen_StringsTester_dynamicCommentCellLarge(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_860684655());
    $b~__tact_string_builder_append(__gen_str_3872846997());
    return __tact_string_builder_end($b);
}

slice $__gen_StringsTester_dynamicCommentStringLarge(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_860684655());
    $b~__tact_string_builder_append(__gen_str_3872846997());
    return __tact_string_builder_end_slice($b);
}

slice $__gen_StringsTester_stringWithNumber(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_519161862());
    $b~__tact_string_builder_append(__tact_int_to_string(123));
    return __tact_string_builder_end_slice($b);
}

slice $__gen_StringsTester_stringWithNegativeNumber(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_519161862());
    $b~__tact_string_builder_append(__tact_int_to_string((- 123)));
    return __tact_string_builder_end_slice($b);
}

slice $__gen_StringsTester_stringWithLargeNumber(tuple $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_string();
    $b~__tact_string_builder_append(__gen_str_519161862());
    $b~__tact_string_builder_append(__tact_int_to_string(1000000000000000000000000000000000000000000000000000000000000));
    return __tact_string_builder_end_slice($b);
}

slice $__gen_StringsTester_stringWithFloat(tuple $self) impure inline_ref {
    var ($self) = $self;
    return __tact_float_to_string(95, 1);
}

slice $__gen_StringsTester_base64(tuple $self) impure inline_ref {
    var ($self) = $self;
    return $__gen_String_fromBase64(__gen_str_1560934365());
}

slice $__gen_StringsTester_processBase64(tuple $self, slice $src) impure inline_ref {
    var ($self) = $self;
    return $__gen_String_fromBase64($src);
}

((tuple), ()) $__gen_StringsTester_receive(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

;;
;; Public Interface of a Contract StringsTester
;;

(tuple, int) __gen_router_StringsTester(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~$__gen_StringsTester_receive();
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_StringsTester();
    
    ;; Handle operation
    int handled = self~__gen_router_StringsTester(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_StringsTester(self);
}

_ %constantString() method_id(93932) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_constantString(self);
    return res;
}

_ %constantStringUnicode() method_id(94939) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_constantStringUnicode(self);
    return res;
}

_ %constantStringUnicodeLong() method_id(104680) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_constantStringUnicodeLong(self);
    return res;
}

_ %dynamicStringCell() method_id(122225) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicStringCell(self);
    return res;
}

_ %dynamicCommentCell() method_id(122531) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicCommentCell(self);
    return res;
}

_ %dynamicCommentCellLarge() method_id(74771) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicCommentCellLarge(self);
    return res;
}

_ %dynamicCommentStringLarge() method_id(74191) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_dynamicCommentStringLarge(self);
    return res;
}

_ %stringWithNumber() method_id(68752) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithNumber(self);
    return res;
}

_ %stringWithNegativeNumber() method_id(82914) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithNegativeNumber(self);
    return res;
}

_ %stringWithLargeNumber() method_id(94811) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithLargeNumber(self);
    return res;
}

_ %stringWithFloat() method_id(80064) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_stringWithFloat(self);
    return res;
}

_ %base64() method_id(71427) {
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_base64(self);
    return res;
}

_ %processBase64(slice $$src) method_id(128362) {
    slice $src = $$src;
    var self = __gen_load_StringsTester();
    var res = $__gen_StringsTester_processBase64(self, $src);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://Qmb4niWi8AexNQe63vz5ToTohEU7uh3kGsmZCkdrPRAEm8";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
