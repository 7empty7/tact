#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

builder __gen_write_$init$SerializationTester(builder build_0, (int, int, int, int, int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h, v'i) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_int(v'b, 257);
    build_0 = build_0.store_int(v'c, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'd, 257);
    build_1 = build_1.store_int(v'e, 257);
    build_1 = build_1.store_int(v'f, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'g, 257);
    build_2 = build_2.store_int(v'h, 257);
    build_2 = build_2.store_int(v'i, 257);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell init(cell sys', int $$a, int $$b, int $$c, int $$d, int $$e, int $$f, int $$g, int $$h, int $$i) method_id {
    int $a = $$a;
    int $b = $$b;
    int $c = $$c;
    int $d = $$d;
    int $e = $$e;
    int $f = $$f;
    int $g = $$g;
    int $h = $$h;
    int $i = $$i;
    builder b = begin_cell();
    b = b.store_ref(sys');
    b = b.store_int(false, 1);
    b = __gen_write_$init$SerializationTester(b, ($a, $b, $c, $d, $e, $f, $g, $h, $i));
    return b.end_cell();
}

() main() {
}