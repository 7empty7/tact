#include "ordering_A.stdlib.fc";
#include "ordering_A.storage.fc";

(slice) $__gen_A_init(slice $owner) impure inline_ref {
    var (($self'owner)) = (null());
    $self'owner = $owner;
    return ($self'owner);
}

(slice) __gen_load_A() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_A();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~__gen_read_$init$A();
        $sc.end_parse();
        return $__gen_A_init(owner);
    }
}

() __gen_store_A((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_A(b, v);
    set_data(b.end_cell());
}

(int, int) $__gen_Int_inc(int $self) impure inline_ref {
    var ($self) = $self;
    $self = ($self + 1);
    return ($self, $self);
}

((int, int, int)) __gen_constructor_S$v3_v2_v1(int v3, int v2, int v1) inline {
    return (v1, v2, v3);
}

(int, int, int) $__gen_A_create((slice) $self, int $v) impure inline_ref {
    var (($self'owner)) = $self;
    return __gen_constructor_S$v3_v2_v1($v~$__gen_Int_inc(), $v~$__gen_Int_inc(), $v~$__gen_Int_inc());
}

((int)) __gen_constructor_DeployOk$queryId(int queryId) inline {
    return (queryId);
}

(((slice)), ()) $__gen_A_receive_Deploy((slice) $self, (int) $deploy) impure inline {
    var ($self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(__gen_constructor_DeployOk$queryId($deploy'queryId)));
    return (($self'owner), ());
}

;;
;; Public Interface of a Contract A
;;

((slice), int) __gen_router_A((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_A_receive_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_A();
    
    ;; Handle operation
    int handled = self~__gen_router_A(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_A(self);
}

_ %create(int $$v) method_id(96687) {
    int $v = $$v;
    var self = __gen_load_A();
    var res = $__gen_A_create(self, $v);
    return __gen_S_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmbC6fsk52Fz3mtBKhqS69DWrZvjHiCB8dUobEdoUbTAB3";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
