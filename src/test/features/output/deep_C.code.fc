#include "deep_C.stdlib.fc";

builder __gen_write_C(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(slice, ((slice))) __gen_read_C(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    return (sc_0, (v'parent));
}

builder __gen_write_$init$C(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(slice, ((slice))) __gen_read_$init$C(slice sc_0) inline {
    var v'parent = sc_0~__tact_load_address();
    return (sc_0, (v'parent));
}

(slice) $__gen_C_init(slice $parent) impure inline_ref {
    var (($self'parent)) = (null());
    $self'parent = $parent;
    return ($self'parent);
}

(slice) __gen_load_C() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_C();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice parent) = $sc~__gen_read_$init$C();
        $sc.end_parse();
        return $__gen_C_init(parent);
    }
}

() __gen_store_C((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_C(b, v);
    set_data(b.end_cell());
}

;; String "Message2"
slice __gen_str_1801178584() asm "B{b5ee9c7241010101000a0000104d65737361676532cd775f6e} B>boc <s PUSHSLICE";

slice $contractAddress((cell, cell) $s) impure inline_ref {
    var (($s'code, $s'data)) = $s;
    return __tact_compute_contract_address(0, $s'code, $s'data);
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

cell $__gen_String_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline {
    return (bounce, to, value, mode, body, code, data);
}

(cell, cell) $__gen_C_init_child(cell sys', slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: C
    cell mine = __tact_dict_get_code(source, 30887);
    contracts = __tact_dict_set_code(contracts, 30887, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = __gen_write_$init$C(b, ($parent));
    return (mine, b.end_cell());
}

((slice), ()) $__gen_C_receive_comment_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d((slice) $self) impure inline {
    var ($self'parent) = $self;
    var ($init'code, $init'data) = $__gen_C_init_child(__tact_context_sys, $self'parent);
    slice $address = $contractAddress(($init'code, $init'data));
    $send(__gen_constructor_SendParameters$value_to_mode_bounce_code_data_body(0, $address, (64 + 2), true, $init'code, $init'data, $__gen_String_asComment(__gen_str_1801178584())));
    return (($self'parent), ());
}

((slice), ()) $__gen_C_receive_comment_fc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272((slice) $self) impure inline {
    var ($self'parent) = $self;
    return (($self'parent), ());
}

;;
;; Public Interface of a Contract C
;;

((slice), int) __gen_router_C((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Message" message
        if (text_op == 0xb41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d) {
            self~$__gen_C_receive_comment_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d();
            return (self, true);
        }
        
        ;; Receive "Message2" message
        if (text_op == 0xfc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272) {
            self~$__gen_C_receive_comment_fc3c82112466581dba23f904cd1a09723c0869adea0045bd6733ea4f76dbd272();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_C();
    
    ;; Handle operation
    int handled = self~__gen_router_C(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_C(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmbDHWb7N1vg2jJZuYfS81iQUfoETgsWFj9BL687i6RFXC";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
