global (int, slice, int) __tact_context;
global cell __tact_context_sys;

tuple __tact_string_builder_start(int comment) inline {
    builder b = begin_cell();
    if (comment) {
        b = store_uint(b, 0, 32);
    }
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(true);
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(false);
}

cell __tact_string_builder_end(tuple builders) {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);
    
    while((sliceBits > 0) | (sliceRefs > 0)) {
        
        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;
        
        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }
        
        ;; Update builders
        builders = cons(b, tail);
        
        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }
    
    return ((builders), ());
}

slice __tact_int_to_string(int src) {
    var b = begin_cell();
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    if (src < 1000000000000000000000000000000) {
        int len = 0;
        int value = 0;
        int mult = 1;
        do {
            (src, int res) = src.divmod(10);
            value = value + (res + 48) * mult;
            mult = mult * 256;
            len = len + 1;
        } until (src == 0);
        
        b = b.store_uint(value, len * 8);
    } else {
        tuple t = empty_tuple();
        int len = 0;
        do {
            int digit = src % 10;
            t~tpush(digit);
            len = len + 1;
            src = src / 10;
        } until (src == 0);
        
        int c = len - 1;
        repeat(len) {
            int v = t.at(c);
            b = b.store_uint(v + 48, 8);
            c = c - 1;
        }
    }
    return b.end_cell().begin_parse();
}

slice __tact_float_to_string(int src, int digits) {
    throw_if(134, (digits <= 0) | (digits > 77));
    builder b = begin_cell();
    
    if (src < 0) {
        b = b.store_uint(45, 8);
        src = - src;
    }
    
    ;; Process rem part
    int skip = true;
    int len = 0;
    int rem = 0;
    tuple t = empty_tuple();
    repeat(digits) {
        (src, rem) = src.divmod(10);
        if ( ~ ( skip & ( rem == 0 ) ) ) {
            skip = false;
            t~tpush(rem + 48);
            len = len + 1;
        }
    }
    
    ;; Process dot
    if (~ skip) {
        t~tpush(46);
        len = len + 1;
    }
    
    do {
        (src, rem) = src.divmod(10);
        t~tpush(rem + 48);
        len = len + 1;
    } until (src == 0);
    
    int c = len - 1;
    repeat(len) {
        int v = t.at(c);
        b = b.store_uint(v, 8);
        c = c - 1;
    }
    ;; Result
    return b.end_cell().begin_parse();
}

builder __gen_write_StringsTester(builder build_0, (int) v) inline {
    var (v'fee) = v;
    build_0 = store_int(build_0, v'fee, 257);
    return build_0;
}

(slice, ((int))) __gen_read_StringsTester(slice sc_0) inline {
    var v'fee = sc_0~load_int(257);
    return (sc_0, (v'fee));
}

(int) __gen_load_StringsTester() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_StringsTester();
}

;; String "test string"
slice __gen_str_18160() asm "B{b5ee9c7241010101000d0000167465737420737472696e67ee608f50} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_18164() asm "B{b5ee9c7241010101001a000030d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d8d539ad} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€ Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_18168() asm "B{b5ee9c72410206010002fa0001fed0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f918020d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b80101fed0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d182200201fed0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d180200301fef09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd10401fe80d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b50500dcd18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d0918e6a} B>boc <s PUSHSLICE";

;; String "Hello!"
slice __gen_str_18176() asm "B{b5ee9c7241010101000800000c48656c6c6f21a44219b3} B>boc <s PUSHSLICE";

;; String "Something something world!"
slice __gen_str_18188() asm "B{b5ee9c7241010101001c000034536f6d657468696e6720736f6d657468696e6720776f726c64212a90ca7f} B>boc <s PUSHSLICE";

;; String "Hello, your balance: "
slice __gen_str_18232() asm "B{b5ee9c7241010101001700002a48656c6c6f2c20796f75722062616c616e63653a201d628127} B>boc <s PUSHSLICE";

cell __gen_StringsTester_init(cell sys') inline {
    var ((self'fee)) = (0);
    self'fee = 1200000000;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_StringsTester(b', (self'fee));
    return b'.end_cell();
}

slice __gen_StringsTester_constantString((int) self) impure inline {
    var ((self'fee)) = self;
    return __gen_str_18160();
}

_ __gen_get_constantString() method_id(93932) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_constantString(self);
    return res;
}

slice __gen_StringsTester_constantStringUnicode((int) self) impure inline {
    var ((self'fee)) = self;
    return __gen_str_18164();
}

_ __gen_get_constantStringUnicode() method_id(94939) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_constantStringUnicode(self);
    return res;
}

slice __gen_StringsTester_constantStringUnicodeLong((int) self) impure inline {
    var ((self'fee)) = self;
    return __gen_str_18168();
}

_ __gen_get_constantStringUnicodeLong() method_id(104680) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_constantStringUnicodeLong(self);
    return res;
}

cell __gen_StringsTester_dynamicStringCell((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    b~__tact_string_builder_append(__gen_str_18176());
    return __tact_string_builder_end(b);
}

_ __gen_get_dynamicStringCell() method_id(122225) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_dynamicStringCell(self);
    return res;
}

cell __gen_StringsTester_dynamicCommentCell((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_comment();
    b~__tact_string_builder_append(__gen_str_18188());
    return __tact_string_builder_end(b);
}

_ __gen_get_dynamicCommentCell() method_id(122531) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_dynamicCommentCell(self);
    return res;
}

cell __gen_StringsTester_dynamicCommentCellLarge((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    b~__tact_string_builder_append(__gen_str_18176());
    b~__tact_string_builder_append(__gen_str_18168());
    return __tact_string_builder_end(b);
}

_ __gen_get_dynamicCommentCellLarge() method_id(74771) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_dynamicCommentCellLarge(self);
    return res;
}

slice __gen_StringsTester_dynamicCommentStringLarge((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    b~__tact_string_builder_append(__gen_str_18176());
    b~__tact_string_builder_append(__gen_str_18168());
    return __tact_string_builder_end_slice(b);
}

_ __gen_get_dynamicCommentStringLarge() method_id(74191) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_dynamicCommentStringLarge(self);
    return res;
}

slice __gen_StringsTester_stringWithNumber((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    b~__tact_string_builder_append(__gen_str_18232());
    b~__tact_string_builder_append(__tact_int_to_string(123));
    return __tact_string_builder_end_slice(b);
}

_ __gen_get_stringWithNumber() method_id(68752) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_stringWithNumber(self);
    return res;
}

slice __gen_StringsTester_stringWithNegativeNumber((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    b~__tact_string_builder_append(__gen_str_18232());
    b~__tact_string_builder_append(__tact_int_to_string((- 123)));
    return __tact_string_builder_end_slice(b);
}

_ __gen_get_stringWithNegativeNumber() method_id(82914) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_stringWithNegativeNumber(self);
    return res;
}

slice __gen_StringsTester_stringWithLargeNumber((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    b~__tact_string_builder_append(__gen_str_18232());
    b~__tact_string_builder_append(__tact_int_to_string(1000000000000000000000000000000000000000000000000000000000000));
    return __tact_string_builder_end_slice(b);
}

_ __gen_get_stringWithLargeNumber() method_id(94811) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_stringWithLargeNumber(self);
    return res;
}

slice __gen_StringsTester_stringWithFloat((int) self) impure inline {
    var ((self'fee)) = self;
    return __tact_float_to_string(95, 1);
}

_ __gen_get_stringWithFloat() method_id(80064) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_stringWithFloat(self);
    return res;
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return ();
    }
    
    throw(130);
}

cell init_StringsTester(cell sys') method_id {
    return __gen_StringsTester_init(sys');
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmWGHC9EjWLTw2j2gG2QhHaTgMhBUR4Hw1481H4tEGuRkv";
}