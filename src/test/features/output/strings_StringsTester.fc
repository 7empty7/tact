global (int, slice, int) __tact_context;
global cell __tact_context_sys;

tuple __tact_string_builder_start(int comment) {
    builder b = begin_cell();
    if (comment) {
        b = store_uint(b, 0, 32);
    }
    return tpush(tpush(empty_tuple(), begin_cell()), null());
}

tuple __tact_string_builder_start_comment() {
    return __tact_string_builder_start(true);
}

tuple __tact_string_builder_start_string() {
    return __tact_string_builder_start(false);
}

cell __tact_string_builder_end(tuple builders) {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (builder b, tuple tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

builder __gen_write_StringsTester(builder build_0, (int) v) inline {
    var (v'fee) = v;
    build_0 = store_int(build_0, v'fee, 257);
    return build_0;
}

(slice, ((int))) __gen_read_StringsTester(slice sc_0) inline {
    var v'fee = sc_0~load_int(257);
    return (sc_0, (v'fee));
}

(int) __gen_load_StringsTester() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_StringsTester();
}

;; String "test string"
slice __gen_str_17226() asm "B{b5ee9c7241010101000d0000167465737420737472696e67ee608f50} B>boc <s PUSHSLICE";

;; String "Ð¿Ñ€Ð¸Ð²ÐµÑ‚ Ð¼Ð¸Ñ€ ðŸ‘€"
slice __gen_str_17230() asm "B{b5ee9c7241010101001a000030d0bfd180d0b8d0b2d0b5d18220d0bcd0b8d18020f09f9180d8d539ad} B>boc <s PUSHSLICE";

cell __gen_StringsTester_init(cell sys') inline {
    var ((self'fee)) = (0);
    self'fee = 1200000000;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_StringsTester(b', (self'fee));
    return b'.end_cell();
}

slice __gen_StringsTester_constantString((int) self) impure inline {
    var ((self'fee)) = self;
    return __gen_str_17226();
}

_ __gen_get_constantString() method_id(93932) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_constantString(self);
    return res;
}

slice __gen_StringsTester_constantStringUnicode((int) self) impure inline {
    var ((self'fee)) = self;
    return __gen_str_17230();
}

_ __gen_get_constantStringUnicode() method_id(94939) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_constantStringUnicode(self);
    return res;
}

cell __gen_StringsTester_dynamicStringCell((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_string();
    return __tact_string_builder_end(b);
}

_ __gen_get_dynamicStringCell() method_id(122225) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_dynamicStringCell(self);
    return res;
}

cell __gen_StringsTester_dynamicCommentCell((int) self) impure inline {
    var ((self'fee)) = self;
    tuple b = __tact_string_builder_start_comment();
    return __tact_string_builder_end(b);
}

_ __gen_get_dynamicCommentCell() method_id(122531) {
    var self = __gen_load_StringsTester();
    var res = __gen_StringsTester_dynamicCommentCell(self);
    return res;
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return ();
    }
    
    throw(130);
}

cell init_StringsTester(cell sys') method_id {
    return __gen_StringsTester_init(sys');
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://Qmb3iivDd4KPZxyqLaywmh7NMeLWAnvg4oHFmhFbmWVtFH";
}