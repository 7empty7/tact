#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

forall X0, X1, X2, X3, X4 -> (X0, X1, X2, X3, X4) __tact_tuple_destroy_5(tuple v) asm "5 UNTUPLE";

builder __gen_write_Vars(builder build_0, (int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_int(v'b, 257);
    build_0 = build_0.store_int(v'c, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'd, 257);
    build_1 = build_1.store_int(v'e, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(int, int, int, int, int) __gen_Vars_from_tuple(tuple v) inline {
    var (int v'a, int v'b, int v'c, int v'd, int v'e) = __tact_tuple_destroy_5(v);
    return (v'a, v'b, v'c, v'd, v'e);
}

builder __gen_write_$init$SerializationTester2(builder build_0, ((int, int, int, int, int), (int, int, int, int, int)) v) inline {
    var ((v'a'a, v'a'b, v'a'c, v'a'd, v'a'e), (v'b'a, v'b'b, v'b'c, v'b'd, v'b'e)) = v;
    build_0 = __gen_write_Vars(build_0, (v'a'a, v'a'b, v'a'c, v'a'd, v'a'e));
    var build_1 = begin_cell();
    build_1 = __gen_write_Vars(build_1, (v'b'a, v'b'b, v'b'c, v'b'd, v'b'e));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell init(cell sys', tuple $$a, tuple $$b) method_id {
    (int, int, int, int, int) $a = __gen_Vars_from_tuple($$a);
    (int, int, int, int, int) $b = __gen_Vars_from_tuple($$b);
    builder b = begin_cell();
    b = b.store_ref(sys');
    b = b.store_int(false, 1);
    b = __gen_write_$init$SerializationTester2(b, ($a, $b));
    return b.end_cell();
}

() main() {
}