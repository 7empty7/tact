;;
;; Header files for B
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; $B$_store
builder $B$_store(builder build_0, (slice) v) inline;

;; $B$_load
(slice, ((slice))) $B$_load(slice sc_0) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $B$init$_load
(slice, ((slice))) $B$init$_load(slice sc_0) inline;

;; $C$init$_store
builder $C$init$_store(builder build_0, (slice) v) inline;

;; $B$_contract_init
(slice) $B$_contract_init(slice $parent) impure inline_ref;

;; $B$_contract_load
(slice) $B$_contract_load() impure inline;

;; $B$_contract_store
() $B$_contract_store((slice) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline_ref;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $C$_init_child
(cell, cell) $C$_init_child(cell sys', slice $parent) inline_ref;

;; $B$_fun_getNext
((slice), (cell, cell)) $B$_fun_getNext((slice) $self) impure inline_ref;

;; $SendParameters$_constructor_value_to_mode_bounce_code_data_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int value, slice to, int mode, int bounce, cell code, cell data, cell body) inline;
