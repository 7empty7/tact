(slice, ((int, int, cell, slice, builder, slice))) $Update$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2217298645);
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(1);
    var v'c = sc_0~load_ref();
    var v'd = sc_0~load_ref().begin_parse();
    var v'e = begin_cell().store_slice(sc_0~load_ref().begin_parse());
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'f = sc_1~load_ref().begin_parse();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}

builder $SerializationTester$_store(builder build_0, (int, int, cell, slice, builder, slice) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_int(v'b, 1);
    build_0 = build_0.store_ref(v'c);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'd).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'e.end_cell().begin_parse()).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'f).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, cell, slice, builder, slice))) $SerializationTester$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(1);
    var v'c = sc_0~load_ref();
    var v'd = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'e = begin_cell().store_slice(sc_1~load_ref().begin_parse());
    var v'f = sc_1~load_ref().begin_parse();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}

(slice, ((int, int, cell, slice, builder, slice))) $SerializationTester$init$_load(slice sc_0) inline_ref {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_int(1);
    var v'c = sc_0~load_ref();
    var v'd = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'e = begin_cell().store_slice(sc_1~load_ref().begin_parse());
    var v'f = sc_1~load_ref().begin_parse();
    return (sc_0, (v'a, v'b, v'c, v'd, v'e, v'f));
}