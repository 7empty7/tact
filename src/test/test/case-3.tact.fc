forall X -> tuple __tact_to_tuple(X x) impure asm "NOP";

(slice, tuple) __gen_read_Source(slice sc) impure {
    var __a = sc~load_int(257);
    var __b = sc~load_int(257);
    return (sc, __tact_to_tuple([__a, __b]));
}

(slice, tuple) __gen_read_SampleContract(slice sc) impure {
    var __a = sc~load_int(257);
    var __b = sc~load_int(257);
    sc = (sc~load_ref()).begin_parse();
    var __c = sc~__gen_read_Source();
    return (sc, __tact_to_tuple([__a, __b, __c]));
}

tuple __gen_load_SampleContract() inline {
    slice sc = get_data().begin_parse();
    tuple res = sc~__gen_read_SampleContract();
    return res;
}

(tuple, int) __gen_SampleContract_stake(tuple self) impure {
    return (self, at(self, 0));
}

_ __gen_get_stake() method_id(80984) {
    tuple self = __gen_load_SampleContract();
    var res = self~__gen_SampleContract_stake();
    return res;
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    int op = in_msg~load_uint(32);
    tuple self = __gen_load_SampleContract();
    
    throw(100);
}