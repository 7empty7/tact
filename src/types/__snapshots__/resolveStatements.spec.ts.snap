// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolveStatements should fail statements for case-0 1`] = `
"Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     return x;
          ^~~~~~~~~
  6 | }
Type mismatch: Int is not assignable to Bool"
`;

exports[`resolveStatements should fail statements for case-1 1`] = `
"Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     repeat(true) {
          ^~~~~~~~~~~~~~
  6 |         x = x + 1;
Type mismatch: Bool is not assignable to Int"
`;

exports[`resolveStatements should fail statements for case-2 1`] = `
"Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     while(x) {
          ^~~~~~~~~~
  6 |         x = x + 1;
Type mismatch: Int is not assignable to bool"
`;

exports[`resolveStatements should fail statements for case-3 1`] = `
"Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     do {
          ^~~~
  6 |         x = x + 1;
Type mismatch: Int is not assignable to bool"
`;

exports[`resolveStatements should fail statements for case-4 1`] = `
"Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     if (x) {
          ^~~~~~~~
  6 |         x = x + 1;
Type mismatch: Int is not assignable to Bool"
`;

exports[`resolveStatements should fail statements for case-5 1`] = `
"Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     x = "hello world";
          ^~~~~~~~~~~~~~~~~~
  6 |     return true;
Type mismatch: String is not assignable to Int"
`;

exports[`resolveStatements should fail statements for case-6 1`] = `
"Line 9, col 12:
   8 | fun f2(a: Int): Int {
>  9 |     return f1(a);
                  ^~~~~
  10 | }
Function "f1" expects 2 arguments, got 1"
`;

exports[`resolveStatements should fail statements for case-7 1`] = `
"Line 10, col 16:
   9 |     fun f2(a: Int): Int {
> 10 |         return self.f1(a);
                      ^~~~~~~~~~
  11 |     }
Function "f1" expects 2 arguments, got 1"
`;

exports[`resolveStatements should fail statements for case-8 1`] = `
"Line 9, col 18:
   8 | fun f2(a: Int): Int {
>  9 |     return f1(a, true);
                        ^~~~
  10 | }
Invalid type "Bool" for argument "b""
`;

exports[`resolveStatements should fail statements for case-9 1`] = `
"Line 10, col 27:
   9 |     fun f2(a: Int): Int {
> 10 |         return self.f1(a, true);
                                 ^~~~
  11 |     }
Invalid type "Bool" for argument "b""
`;

exports[`resolveStatements should resolve statements for case-0 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x == 0",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-1 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "123 + 10 == x",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-2 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "(123 + 10) / 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "(123 + 10) / 10 == x",
    "Bool",
  ],
  [
    "y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "y > 0",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-3 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-4 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
  [
    "w",
    "Int?",
  ],
  [
    "w!!",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "w!! > 0",
    "Bool",
  ],
  [
    "b > 0 || z || (w!! > 0)",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-5 1`] = `
[
  [
    "p",
    "Point",
  ],
  [
    "p.x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.x == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.y == 0",
    "Bool",
  ],
  [
    "p.x == 0 && p.y == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.toCell()",
    "Cell",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-6 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "a > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "-10",
    "Int",
  ],
  [
    "a < -10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "-1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
]
`;
