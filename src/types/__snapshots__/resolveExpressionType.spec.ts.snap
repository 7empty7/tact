// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolveExpressionType should resolve expressions for case-0.tact 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x == 0",
    "Bool",
  ],
]
`;

exports[`resolveExpressionType should resolve expressions for case-1.tact 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "123 + 10 == x",
    "Bool",
  ],
]
`;

exports[`resolveExpressionType should resolve expressions for case-2.tact 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "(123 + 10) / 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "(123 + 10) / 10 == x",
    "Bool",
  ],
  [
    "y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "y > 0",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveExpressionType should resolve expressions for case-3.tact 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveExpressionType should resolve expressions for case-4.tact 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
  [
    "w",
    "Int?",
  ],
  [
    "w!!",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "w!! > 0",
    "Bool",
  ],
  [
    "b > 0 || z || (w!! > 0)",
    "Bool",
  ],
]
`;

exports[`resolveExpressionType should resolve expressions for case-5.tact 1`] = `
[
  [
    "p",
    "Point",
  ],
  [
    "p.x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.x == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.y == 0",
    "Bool",
  ],
  [
    "p.x == 0 && p.y == 0",
    "Bool",
  ],
  [
    "abi",
    "$ABI",
  ],
  [
    "p",
    "Point",
  ],
  [
    "abi.pack_cell(p)",
    "Cell",
  ],
]
`;

exports[`resolveExpressionType should resolve expressions for case-6.tact 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "a > 0",
    "Bool",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "-10",
    "Int",
  ],
  [
    "a < -10",
    "Bool",
  ],
  [
    "1",
    "Int",
  ],
  [
    "-1",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
]
`;
