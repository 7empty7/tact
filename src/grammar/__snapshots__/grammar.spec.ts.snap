// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`grammar should parse case-0.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 3,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 1,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 2,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 4,
  "kind": "program",
}
`;

exports[`grammar should parse case-1.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 13,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 11,
            "kind": "op_binary",
            "left": {
              "id": 9,
              "kind": "op_binary",
              "left": {
                "id": 7,
                "kind": "op_binary",
                "left": {
                  "id": 5,
                  "kind": "number",
                  "ref": 0,
                  "value": 0n,
                },
                "op": "+",
                "ref": 0 + 1,
                "right": {
                  "id": 6,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "op": "*",
              "ref": (0 + 1) * 10,
              "right": {
                "id": 8,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
            },
            "op": "/",
            "ref": (0 + 1) * 10 / 20,
            "right": {
              "id": 10,
              "kind": "number",
              "ref": 20,
              "value": 20n,
            },
          },
          "id": 12,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20;,
        },
      ],
    },
  ],
  "id": 14,
  "kind": "program",
}
`;

exports[`grammar should parse case-2.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 38,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 36,
            "kind": "op_binary",
            "left": {
              "id": 34,
              "kind": "op_binary",
              "left": {
                "id": 32,
                "kind": "op_binary",
                "left": {
                  "id": 30,
                  "kind": "op_binary",
                  "left": {
                    "id": 28,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 29,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 31,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 33,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10,
            "right": {
              "id": 35,
              "kind": "number",
              "ref": 10,
              "value": 10n,
            },
          },
          "id": 37,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10;,
        },
      ],
    },
  ],
  "id": 39,
  "kind": "program",
}
`;

exports[`grammar should parse case-3.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 52,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 50,
            "kind": "op_binary",
            "left": {
              "id": 46,
              "kind": "op_binary",
              "left": {
                "id": 44,
                "kind": "op_binary",
                "left": {
                  "id": 42,
                  "kind": "op_binary",
                  "left": {
                    "id": 40,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 41,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 43,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 45,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10 * someId,
            "right": {
              "id": 49,
              "kind": "op_binary",
              "left": {
                "id": 47,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
              "op": "*",
              "ref": 10 * someId,
              "right": {
                "id": 48,
                "kind": "id",
                "ref": someId,
                "value": "someId",
              },
            },
          },
          "id": 51,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId;,
        },
      ],
    },
  ],
  "id": 53,
  "kind": "program",
}
`;

exports[`grammar should parse case-4.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 74,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 72,
            "kind": "op_binary",
            "left": {
              "id": 64,
              "kind": "op_binary",
              "left": {
                "id": 60,
                "kind": "op_binary",
                "left": {
                  "id": 58,
                  "kind": "op_binary",
                  "left": {
                    "id": 56,
                    "kind": "op_binary",
                    "left": {
                      "id": 54,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 55,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 57,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 59,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 63,
                "kind": "op_binary",
                "left": {
                  "id": 61,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 62,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10,
            "right": {
              "id": 71,
              "kind": "op_binary",
              "left": {
                "id": 67,
                "kind": "op_binary",
                "left": {
                  "id": 65,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 66,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 10,
              "right": {
                "id": 70,
                "kind": "op_binary",
                "left": {
                  "id": 68,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < 10,
                "right": {
                  "id": 69,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
            },
          },
          "id": 73,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;,
        },
      ],
    },
  ],
  "id": 75,
  "kind": "program",
}
`;

exports[`grammar should parse case-5.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 98,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 96,
            "kind": "op_binary",
            "left": {
              "id": 86,
              "kind": "op_binary",
              "left": {
                "id": 82,
                "kind": "op_binary",
                "left": {
                  "id": 80,
                  "kind": "op_binary",
                  "left": {
                    "id": 78,
                    "kind": "op_binary",
                    "left": {
                      "id": 76,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 77,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 79,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 81,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 85,
                "kind": "op_binary",
                "left": {
                  "id": 83,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 84,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10),
            "right": {
              "id": 95,
              "kind": "op_binary",
              "left": {
                "id": 89,
                "kind": "op_binary",
                "left": {
                  "id": 87,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 88,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 123.add(10),
              "right": {
                "id": 94,
                "kind": "op_binary",
                "left": {
                  "id": 90,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < 123.add(10),
                "right": {
                  "args": [
                    {
                      "id": 92,
                      "kind": "number",
                      "ref": 10,
                      "value": 10n,
                    },
                  ],
                  "id": 93,
                  "kind": "op_call",
                  "name": "add",
                  "ref": 123.add(10),
                  "src": {
                    "id": 91,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                },
              },
            },
          },
          "id": 97,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);,
        },
      ],
    },
  ],
  "id": 99,
  "kind": "program",
}
`;

exports[`grammar should parse case-6.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 123,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 121,
            "kind": "op_binary",
            "left": {
              "id": 110,
              "kind": "op_binary",
              "left": {
                "id": 106,
                "kind": "op_binary",
                "left": {
                  "id": 104,
                  "kind": "op_binary",
                  "left": {
                    "id": 102,
                    "kind": "op_binary",
                    "left": {
                      "id": 100,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 101,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 103,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 105,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 109,
                "kind": "op_binary",
                "left": {
                  "id": 107,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 108,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10)),
            "right": {
              "id": 120,
              "kind": "op_binary",
              "left": {
                "id": 113,
                "kind": "op_binary",
                "left": {
                  "id": 111,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 112,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < abs(123.add(10)),
              "right": {
                "id": 119,
                "kind": "op_binary",
                "left": {
                  "id": 114,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < abs(123.add(10)),
                "right": {
                  "args": [
                    {
                      "args": [
                        {
                          "id": 116,
                          "kind": "number",
                          "ref": 10,
                          "value": 10n,
                        },
                      ],
                      "id": 117,
                      "kind": "op_call",
                      "name": "add",
                      "ref": 123.add(10),
                      "src": {
                        "id": 115,
                        "kind": "number",
                        "ref": 123,
                        "value": 123n,
                      },
                    },
                  ],
                  "id": 118,
                  "kind": "op_static_call",
                  "name": "abs",
                  "ref": abs(123.add(10)),
                },
              },
            },
          },
          "id": 122,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));,
        },
      ],
    },
  ],
  "id": 124,
  "kind": "program",
}
`;

exports[`grammar should parse case-7.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 127,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc() {
    return 0;
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 125,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 126,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
    {
      "args": [],
      "attribute": [],
      "id": 130,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 128,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 129,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
    {
      "args": [],
      "attribute": [],
      "id": 133,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Bool {
    return 0;
},
      "return": "Bool",
      "statements": [
        {
          "expression": {
            "id": 131,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 132,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 134,
  "kind": "program",
}
`;

exports[`grammar should parse case-8.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 135,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_1",
      "ref": @name(native_name_1)
native testFunc();,
      "return": null,
    },
    {
      "args": [],
      "id": 136,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_2",
      "ref": @name(native_name_2)
native testFunc(): Int;,
      "return": "Int",
    },
    {
      "args": [],
      "id": 137,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_3",
      "ref": @name(native_name_3)
native testFunc(): Bool;,
      "return": "Bool",
    },
  ],
  "id": 138,
  "kind": "program",
}
`;

exports[`grammar should parse case-9.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 148,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 1 + 2 + 3!! > 123;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 146,
            "kind": "op_binary",
            "left": {
              "id": 144,
              "kind": "op_binary",
              "left": {
                "id": 141,
                "kind": "op_binary",
                "left": {
                  "id": 139,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 140,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + 3!!,
              "right": {
                "id": 143,
                "kind": "op_unary",
                "op": "!!",
                "ref": 3!!,
                "right": {
                  "id": 142,
                  "kind": "number",
                  "ref": 3,
                  "value": 3n,
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + 3!! > 123,
            "right": {
              "id": 145,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 147,
          "kind": "statement_return",
          "ref": return 1 + 2 + 3!! > 123;,
        },
      ],
    },
  ],
  "id": 149,
  "kind": "program",
}
`;

exports[`grammar should parse case-10.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 26,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 24,
            "kind": "op_binary",
            "left": {
              "id": 22,
              "kind": "op_binary",
              "left": {
                "id": 17,
                "kind": "op_binary",
                "left": {
                  "id": 15,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 16,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + (123 + 3)!!,
              "right": {
                "id": 21,
                "kind": "op_unary",
                "op": "!!",
                "ref": (123 + 3)!!,
                "right": {
                  "id": 20,
                  "kind": "op_binary",
                  "left": {
                    "id": 18,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                  "op": "+",
                  "ref": 123 + 3,
                  "right": {
                    "id": 19,
                    "kind": "number",
                    "ref": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + (123 + 3)!! > 123,
            "right": {
              "id": 23,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 25,
          "kind": "statement_return",
          "ref": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "id": 27,
  "kind": "program",
}
`;
