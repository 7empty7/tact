// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`grammar should fail case-0 1`] = `
"Line 1, col 20:
> 1 | fun testFunc(): Int;
                         ^
Expected "{""
`;

exports[`grammar should fail case-1 1`] = `
"Line 1, col 5:
> 1 | fun __gen_hello(): Int {
          ^~~~~~~~~~~
  2 |     
Variable name cannot start with "__gen""
`;

exports[`grammar should fail case-2 1`] = `
"Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let __gen_a: Int = 0;
              ^~~~~~~
  3 | }
Variable name cannot start with "__gen""
`;

exports[`grammar should fail case-3 1`] = `
"Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let __tact_a: Int = 0;
              ^~~~~~~~
  3 | }
Variable name cannot start with "__tact""
`;

exports[`grammar should fail case-4 1`] = `
"Line 2, col 9:
  1 | fun hello(): Int {
> 2 |     let if: Int = 0;
              ^
  3 | }
Expected not a reservedWord"
`;

exports[`grammar should fail case-5 1`] = `
"Line 1, col 8:
> 1 | struct __genA {
             ^~~~~~
  2 |     a: Int;
Variable name cannot start with "__gen""
`;

exports[`grammar should fail case-6 1`] = `
"Line 1, col 10:
> 1 | fun main(__gen: Int): Int {
               ^~~~~
  2 |     return 0;
Variable name cannot start with "__gen""
`;

exports[`grammar should fail case-7 1`] = `
"Line 1, col 10:
> 1 | contract __gen_a {
               ^~~~~~~
  2 | 
Variable name cannot start with "__gen""
`;

exports[`grammar should fail case-8 1`] = `
"Line 2, col 10:
  1 | contract A {
> 2 |     init(__tact: Int) {
               ^~~~~~
  3 |         
Variable name cannot start with "__tact""
`;

exports[`grammar should fail case-9 1`] = `
"Line 2, col 11:
  1 | contract A {
> 2 |     fun b(__tact: Int) {
                ^~~~~~
  3 |         
Variable name cannot start with "__tact""
`;

exports[`grammar should parse case-0 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 4,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": {
        "id": 1,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 2,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 3,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 5,
  "kind": "program",
}
`;

exports[`grammar should parse case-1 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 15,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20;
},
      "return": {
        "id": 6,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 13,
            "kind": "op_binary",
            "left": {
              "id": 11,
              "kind": "op_binary",
              "left": {
                "id": 9,
                "kind": "op_binary",
                "left": {
                  "id": 7,
                  "kind": "number",
                  "ref": 0,
                  "value": 0n,
                },
                "op": "+",
                "ref": 0 + 1,
                "right": {
                  "id": 8,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "op": "*",
              "ref": (0 + 1) * 10,
              "right": {
                "id": 10,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
            },
            "op": "/",
            "ref": (0 + 1) * 10 / 20,
            "right": {
              "id": 12,
              "kind": "number",
              "ref": 20,
              "value": 20n,
            },
          },
          "id": 14,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20;,
        },
      ],
    },
  ],
  "id": 16,
  "kind": "program",
}
`;

exports[`grammar should parse case-2 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 173,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10;
},
      "return": {
        "id": 162,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 171,
            "kind": "op_binary",
            "left": {
              "id": 169,
              "kind": "op_binary",
              "left": {
                "id": 167,
                "kind": "op_binary",
                "left": {
                  "id": 165,
                  "kind": "op_binary",
                  "left": {
                    "id": 163,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 164,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 166,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 168,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10,
            "right": {
              "id": 170,
              "kind": "number",
              "ref": 10,
              "value": 10n,
            },
          },
          "id": 172,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10;,
        },
      ],
    },
  ],
  "id": 174,
  "kind": "program",
}
`;

exports[`grammar should parse case-3 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 195,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId;
},
      "return": {
        "id": 182,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 193,
            "kind": "op_binary",
            "left": {
              "id": 189,
              "kind": "op_binary",
              "left": {
                "id": 187,
                "kind": "op_binary",
                "left": {
                  "id": 185,
                  "kind": "op_binary",
                  "left": {
                    "id": 183,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 184,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 186,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 188,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10 * someId,
            "right": {
              "id": 192,
              "kind": "op_binary",
              "left": {
                "id": 190,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
              "op": "*",
              "ref": 10 * someId,
              "right": {
                "id": 191,
                "kind": "id",
                "ref": someId,
                "value": "someId",
              },
            },
          },
          "id": 194,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId;,
        },
      ],
    },
  ],
  "id": 196,
  "kind": "program",
}
`;

exports[`grammar should parse case-4 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 218,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;
},
      "return": {
        "id": 197,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 216,
            "kind": "op_binary",
            "left": {
              "id": 208,
              "kind": "op_binary",
              "left": {
                "id": 204,
                "kind": "op_binary",
                "left": {
                  "id": 202,
                  "kind": "op_binary",
                  "left": {
                    "id": 200,
                    "kind": "op_binary",
                    "left": {
                      "id": 198,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 199,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 201,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 203,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 207,
                "kind": "op_binary",
                "left": {
                  "id": 205,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 206,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10,
            "right": {
              "id": 215,
              "kind": "op_binary",
              "left": {
                "id": 211,
                "kind": "op_binary",
                "left": {
                  "id": 209,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 210,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 10,
              "right": {
                "id": 214,
                "kind": "op_binary",
                "left": {
                  "id": 212,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < 10,
                "right": {
                  "id": 213,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
            },
          },
          "id": 217,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;,
        },
      ],
    },
  ],
  "id": 219,
  "kind": "program",
}
`;

exports[`grammar should parse case-5 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 243,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);
},
      "return": {
        "id": 220,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 241,
            "kind": "op_binary",
            "left": {
              "id": 231,
              "kind": "op_binary",
              "left": {
                "id": 227,
                "kind": "op_binary",
                "left": {
                  "id": 225,
                  "kind": "op_binary",
                  "left": {
                    "id": 223,
                    "kind": "op_binary",
                    "left": {
                      "id": 221,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 222,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 224,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 226,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 230,
                "kind": "op_binary",
                "left": {
                  "id": 228,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 229,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10),
            "right": {
              "id": 240,
              "kind": "op_binary",
              "left": {
                "id": 234,
                "kind": "op_binary",
                "left": {
                  "id": 232,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 233,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 123.add(10),
              "right": {
                "id": 239,
                "kind": "op_binary",
                "left": {
                  "id": 235,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < 123.add(10),
                "right": {
                  "args": [
                    {
                      "id": 237,
                      "kind": "number",
                      "ref": 10,
                      "value": 10n,
                    },
                  ],
                  "id": 238,
                  "kind": "op_call",
                  "name": "add",
                  "ref": 123.add(10),
                  "src": {
                    "id": 236,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                },
              },
            },
          },
          "id": 242,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 123.add(10);,
        },
      ],
    },
  ],
  "id": 244,
  "kind": "program",
}
`;

exports[`grammar should parse case-6 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 269,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));
},
      "return": {
        "id": 245,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 267,
            "kind": "op_binary",
            "left": {
              "id": 256,
              "kind": "op_binary",
              "left": {
                "id": 252,
                "kind": "op_binary",
                "left": {
                  "id": 250,
                  "kind": "op_binary",
                  "left": {
                    "id": 248,
                    "kind": "op_binary",
                    "left": {
                      "id": 246,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 247,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 249,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 251,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 255,
                "kind": "op_binary",
                "left": {
                  "id": 253,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 254,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10)),
            "right": {
              "id": 266,
              "kind": "op_binary",
              "left": {
                "id": 259,
                "kind": "op_binary",
                "left": {
                  "id": 257,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 258,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < abs(123.add(10)),
              "right": {
                "id": 265,
                "kind": "op_binary",
                "left": {
                  "id": 260,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < abs(123.add(10)),
                "right": {
                  "args": [
                    {
                      "args": [
                        {
                          "id": 262,
                          "kind": "number",
                          "ref": 10,
                          "value": 10n,
                        },
                      ],
                      "id": 263,
                      "kind": "op_call",
                      "name": "add",
                      "ref": 123.add(10),
                      "src": {
                        "id": 261,
                        "kind": "number",
                        "ref": 123,
                        "value": 123n,
                      },
                    },
                  ],
                  "id": 264,
                  "kind": "op_static_call",
                  "name": "abs",
                  "ref": abs(123.add(10)),
                },
              },
            },
          },
          "id": 268,
          "kind": "statement_return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < abs(123.add(10));,
        },
      ],
    },
  ],
  "id": 270,
  "kind": "program",
}
`;

exports[`grammar should parse case-7 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 273,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc() {
    return 0;
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 271,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 272,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
    {
      "args": [],
      "attribute": [],
      "id": 277,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": {
        "id": 274,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 275,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 276,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
    {
      "args": [],
      "attribute": [],
      "id": 281,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Bool {
    return 0;
},
      "return": {
        "id": 278,
        "kind": "type_ref_simple",
        "name": "Bool",
        "optional": false,
        "ref": Bool,
      },
      "statements": [
        {
          "expression": {
            "id": 279,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 280,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 282,
  "kind": "program",
}
`;

exports[`grammar should parse case-8 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 283,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_1",
      "ref": @name(native_name_1)
native testFunc();,
      "return": null,
    },
    {
      "args": [],
      "id": 285,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_2",
      "ref": @name(native_name_2)
native testFunc(): Int;,
      "return": {
        "id": 284,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
    },
    {
      "args": [],
      "id": 287,
      "kind": "def_native_function",
      "name": "testFunc",
      "nativeName": "native_name_3",
      "ref": @name(native_name_3)
native testFunc(): Bool;,
      "return": {
        "id": 286,
        "kind": "type_ref_simple",
        "name": "Bool",
        "optional": false,
        "ref": Bool,
      },
    },
  ],
  "id": 288,
  "kind": "program",
}
`;

exports[`grammar should parse case-9 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 299,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 1 + 2 + 3!! > 123;
},
      "return": {
        "id": 289,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 297,
            "kind": "op_binary",
            "left": {
              "id": 295,
              "kind": "op_binary",
              "left": {
                "id": 292,
                "kind": "op_binary",
                "left": {
                  "id": 290,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 291,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + 3!!,
              "right": {
                "id": 294,
                "kind": "op_unary",
                "op": "!!",
                "ref": 3!!,
                "right": {
                  "id": 293,
                  "kind": "number",
                  "ref": 3,
                  "value": 3n,
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + 3!! > 123,
            "right": {
              "id": 296,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 298,
          "kind": "statement_return",
          "ref": return 1 + 2 + 3!! > 123;,
        },
      ],
    },
  ],
  "id": 300,
  "kind": "program",
}
`;

exports[`grammar should parse case-10 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 29,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "return": {
        "id": 17,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 27,
            "kind": "op_binary",
            "left": {
              "id": 25,
              "kind": "op_binary",
              "left": {
                "id": 20,
                "kind": "op_binary",
                "left": {
                  "id": 18,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 19,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + (123 + 3)!!,
              "right": {
                "id": 24,
                "kind": "op_unary",
                "op": "!!",
                "ref": (123 + 3)!!,
                "right": {
                  "id": 23,
                  "kind": "op_binary",
                  "left": {
                    "id": 21,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                  "op": "+",
                  "ref": 123 + 3,
                  "right": {
                    "id": 22,
                    "kind": "number",
                    "ref": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + (123 + 3)!! > 123,
            "right": {
              "id": 26,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 28,
          "kind": "statement_return",
          "ref": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "id": 30,
  "kind": "program",
}
`;

exports[`grammar should parse case-11 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 33,
          "kind": "def_argument",
          "name": "src",
          "ref": src: Int?,
          "type": {
            "id": 32,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": true,
            "ref": Int?,
          },
        },
      ],
      "attribute": [],
      "id": 45,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(src: Int?): Int {
    return 1 + 2 + (123 + 3)!! > 123;
},
      "return": {
        "id": 31,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "expression": {
            "id": 43,
            "kind": "op_binary",
            "left": {
              "id": 41,
              "kind": "op_binary",
              "left": {
                "id": 36,
                "kind": "op_binary",
                "left": {
                  "id": 34,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
                "op": "+",
                "ref": 1 + 2,
                "right": {
                  "id": 35,
                  "kind": "number",
                  "ref": 2,
                  "value": 2n,
                },
              },
              "op": "+",
              "ref": 1 + 2 + (123 + 3)!!,
              "right": {
                "id": 40,
                "kind": "op_unary",
                "op": "!!",
                "ref": (123 + 3)!!,
                "right": {
                  "id": 39,
                  "kind": "op_binary",
                  "left": {
                    "id": 37,
                    "kind": "number",
                    "ref": 123,
                    "value": 123n,
                  },
                  "op": "+",
                  "ref": 123 + 3,
                  "right": {
                    "id": 38,
                    "kind": "number",
                    "ref": 3,
                    "value": 3n,
                  },
                },
              },
            },
            "op": ">",
            "ref": 1 + 2 + (123 + 3)!! > 123,
            "right": {
              "id": 42,
              "kind": "number",
              "ref": 123,
              "value": 123n,
            },
          },
          "id": 44,
          "kind": "statement_return",
          "ref": return 1 + 2 + (123 + 3)!! > 123;,
        },
      ],
    },
  ],
  "id": 46,
  "kind": "program",
}
`;

exports[`grammar should parse case-12 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 49,
          "kind": "def_argument",
          "name": "src",
          "ref": src: Int?,
          "type": {
            "id": 48,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": true,
            "ref": Int?,
          },
        },
      ],
      "attribute": [],
      "id": 58,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(src: Int?): Int {
    if (src != null) {
        return src;
    }
    return 0;
},
      "return": {
        "id": 47,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "elseif": null,
          "expression": {
            "id": 52,
            "kind": "op_binary",
            "left": {
              "id": 50,
              "kind": "id",
              "ref": src,
              "value": "src",
            },
            "op": "!=",
            "ref": src != null,
            "right": {
              "id": 51,
              "kind": "null",
              "ref": null,
            },
          },
          "falseStatements": [],
          "id": 55,
          "kind": "statement_condition",
          "ref": if (src != null) {
        return src;
    },
          "trueStatements": [
            {
              "expression": {
                "id": 53,
                "kind": "id",
                "ref": src,
                "value": "src",
              },
              "id": 54,
              "kind": "statement_return",
              "ref": return src;,
            },
          ],
        },
        {
          "expression": {
            "id": 56,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 57,
          "kind": "statement_return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 59,
  "kind": "program",
}
`;

exports[`grammar should parse case-13 1`] = `
{
  "entries": [
    {
      "args": [
        {
          "id": 62,
          "kind": "def_argument",
          "name": "src",
          "ref": src: Int?,
          "type": {
            "id": 61,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": true,
            "ref": Int?,
          },
        },
      ],
      "attribute": [],
      "id": 71,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(src: Int?): Int {
    if (src != null) {
        return src;
    } else {
        return 10;
    }
},
      "return": {
        "id": 60,
        "kind": "type_ref_simple",
        "name": "Int",
        "optional": false,
        "ref": Int,
      },
      "statements": [
        {
          "elseif": null,
          "expression": {
            "id": 65,
            "kind": "op_binary",
            "left": {
              "id": 63,
              "kind": "id",
              "ref": src,
              "value": "src",
            },
            "op": "!=",
            "ref": src != null,
            "right": {
              "id": 64,
              "kind": "null",
              "ref": null,
            },
          },
          "falseStatements": [
            {
              "expression": {
                "id": 68,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
              "id": 69,
              "kind": "statement_return",
              "ref": return 10;,
            },
          ],
          "id": 70,
          "kind": "statement_condition",
          "ref": if (src != null) {
        return src;
    } else {
        return 10;
    },
          "trueStatements": [
            {
              "expression": {
                "id": 66,
                "kind": "id",
                "ref": src,
                "value": "src",
              },
              "id": 67,
              "kind": "statement_return",
              "ref": return src;,
            },
          ],
        },
      ],
    },
  ],
  "id": 72,
  "kind": "program",
}
`;

exports[`grammar should parse case-14 1`] = `
{
  "entries": [
    {
      "declarations": [
        {
          "as": null,
          "id": 74,
          "init": undefined,
          "kind": "def_field",
          "name": "a",
          "ref": a: Int;,
          "type": {
            "id": 73,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "as": null,
          "id": 76,
          "init": undefined,
          "kind": "def_field",
          "name": "b",
          "ref": b: Int;,
          "type": {
            "id": 75,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "args": [
            {
              "id": 78,
              "kind": "def_argument",
              "name": "a",
              "ref": a: Int,
              "type": {
                "id": 77,
                "kind": "type_ref_simple",
                "name": "Int",
                "optional": false,
                "ref": Int,
              },
            },
            {
              "id": 80,
              "kind": "def_argument",
              "name": "b",
              "ref": b: Int,
              "type": {
                "id": 79,
                "kind": "type_ref_simple",
                "name": "Int",
                "optional": false,
                "ref": Int,
              },
            },
          ],
          "id": 89,
          "kind": "def_init_function",
          "ref": init(a: Int, b: Int) {
        self.a = a;
        self.b = b;
    },
          "statements": [
            {
              "expression": {
                "id": 83,
                "kind": "id",
                "ref": a,
                "value": "a",
              },
              "id": 84,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 81,
                  "kind": "lvalue_ref",
                  "name": "self",
                  "ref": self.a,
                },
                {
                  "id": 82,
                  "kind": "lvalue_ref",
                  "name": "a",
                  "ref": a,
                },
              ],
              "ref": self.a = a;,
            },
            {
              "expression": {
                "id": 87,
                "kind": "id",
                "ref": b,
                "value": "b",
              },
              "id": 88,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 85,
                  "kind": "lvalue_ref",
                  "name": "self",
                  "ref": self.b,
                },
                {
                  "id": 86,
                  "kind": "lvalue_ref",
                  "name": "b",
                  "ref": b,
                },
              ],
              "ref": self.b = b;,
            },
          ],
        },
      ],
      "id": 90,
      "kind": "def_contract",
      "name": "Sample",
      "ref": contract Sample {
    a: Int;
    b: Int;
    
    init(a: Int, b: Int) {
        self.a = a;
        self.b = b;
    }
},
    },
  ],
  "id": 91,
  "kind": "program",
}
`;

exports[`grammar should parse case-15 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 116,
      "kind": "def_function",
      "name": "main",
      "ref": fun main() {
    let i: Int = 1;
    while(true) {
        i = i + 1;
    }
    repeat(10) {
        i = i * 10;
    }
    do {
        i = i - 1;
    } until(false);
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 93,
            "kind": "number",
            "ref": 1,
            "value": 1n,
          },
          "id": 94,
          "kind": "statement_let",
          "name": "i",
          "ref": let i: Int = 1;,
          "type": {
            "id": 92,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "condition": {
            "id": 95,
            "kind": "boolean",
            "ref": true,
            "value": true,
          },
          "id": 101,
          "kind": "statement_while",
          "ref": while(true) {
        i = i + 1;
    },
          "statements": [
            {
              "expression": {
                "id": 99,
                "kind": "op_binary",
                "left": {
                  "id": 97,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "+",
                "ref": i + 1,
                "right": {
                  "id": 98,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "id": 100,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 96,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i + 1;,
            },
          ],
        },
        {
          "condition": {
            "id": 102,
            "kind": "number",
            "ref": 10,
            "value": 10n,
          },
          "id": 108,
          "kind": "statement_repeat",
          "ref": repeat(10) {
        i = i * 10;
    },
          "statements": [
            {
              "expression": {
                "id": 106,
                "kind": "op_binary",
                "left": {
                  "id": 104,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "*",
                "ref": i * 10,
                "right": {
                  "id": 105,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "id": 107,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 103,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i * 10;,
            },
          ],
        },
        {
          "condition": {
            "id": 109,
            "kind": "boolean",
            "ref": false,
            "value": false,
          },
          "id": 115,
          "kind": "statement_until",
          "ref": do {
        i = i - 1;
    } until(false);,
          "statements": [
            {
              "expression": {
                "id": 113,
                "kind": "op_binary",
                "left": {
                  "id": 111,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "-",
                "ref": i - 1,
                "right": {
                  "id": 112,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "id": 114,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 110,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i - 1;,
            },
          ],
        },
      ],
    },
  ],
  "id": 117,
  "kind": "program",
}
`;

exports[`grammar should parse case-16 1`] = `
{
  "entries": [
    {
      "args": [],
      "attribute": [],
      "id": 134,
      "kind": "def_function",
      "name": "main",
      "ref": fun main() {
    let i: Int = 1;
    while(i >= 10 || i <= 100) {
        i = i + 1;
    }
},
      "return": null,
      "statements": [
        {
          "expression": {
            "id": 119,
            "kind": "number",
            "ref": 1,
            "value": 1n,
          },
          "id": 120,
          "kind": "statement_let",
          "name": "i",
          "ref": let i: Int = 1;,
          "type": {
            "id": 118,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "condition": {
            "id": 127,
            "kind": "op_binary",
            "left": {
              "id": 123,
              "kind": "op_binary",
              "left": {
                "id": 121,
                "kind": "id",
                "ref": i,
                "value": "i",
              },
              "op": ">=",
              "ref": i >= 10,
              "right": {
                "id": 122,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
            },
            "op": "||",
            "ref": i >= 10 || i <= 100,
            "right": {
              "id": 126,
              "kind": "op_binary",
              "left": {
                "id": 124,
                "kind": "id",
                "ref": i,
                "value": "i",
              },
              "op": ">=",
              "ref": i <= 100,
              "right": {
                "id": 125,
                "kind": "number",
                "ref": 100,
                "value": 100n,
              },
            },
          },
          "id": 133,
          "kind": "statement_while",
          "ref": while(i >= 10 || i <= 100) {
        i = i + 1;
    },
          "statements": [
            {
              "expression": {
                "id": 131,
                "kind": "op_binary",
                "left": {
                  "id": 129,
                  "kind": "id",
                  "ref": i,
                  "value": "i",
                },
                "op": "+",
                "ref": i + 1,
                "right": {
                  "id": 130,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "id": 132,
              "kind": "statement_assign",
              "path": [
                {
                  "id": 128,
                  "kind": "lvalue_ref",
                  "name": "i",
                  "ref": i,
                },
              ],
              "ref": i = i + 1;,
            },
          ],
        },
      ],
    },
  ],
  "id": 135,
  "kind": "program",
}
`;

exports[`grammar should parse case-17 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 137,
          "init": undefined,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int;,
          "type": {
            "id": 136,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 138,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "ref": struct A {
    x: Int;
},
    },
    {
      "fields": [
        {
          "as": null,
          "id": 140,
          "init": undefined,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int;,
          "type": {
            "id": 139,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 141,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "ref": message B {
    x: Int;
},
    },
  ],
  "id": 142,
  "kind": "program",
}
`;

exports[`grammar should parse case-18 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 144,
          "init": undefined,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int;,
          "type": {
            "id": 143,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 145,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "ref": struct A {
    x: Int;
},
    },
    {
      "fields": [
        {
          "as": "coin",
          "id": 147,
          "init": undefined,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int as coin;,
          "type": {
            "id": 146,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 148,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "ref": message B {
    x: Int as coin;
},
    },
  ],
  "id": 149,
  "kind": "program",
}
`;

exports[`grammar should parse case-19 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 152,
          "init": 1000n,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int = 1000;,
          "type": {
            "id": 150,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
      ],
      "id": 153,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "ref": struct A {
    x: Int = 1000;
},
    },
    {
      "fields": [
        {
          "as": "coins",
          "id": 156,
          "init": 1000n,
          "kind": "def_field",
          "name": "x",
          "ref": x: Int as coins = 1000;,
          "type": {
            "id": 154,
            "kind": "type_ref_simple",
            "name": "Int",
            "optional": false,
            "ref": Int,
          },
        },
        {
          "as": null,
          "id": 159,
          "init": true,
          "kind": "def_field",
          "name": "y",
          "ref": y: Bool = true;,
          "type": {
            "id": 157,
            "kind": "type_ref_simple",
            "name": "Bool",
            "optional": false,
            "ref": Bool,
          },
        },
      ],
      "id": 160,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "ref": message B {
    x: Int as coins = 1000;
    y: Bool = true;
},
    },
  ],
  "id": 161,
  "kind": "program",
}
`;

exports[`grammar should parse case-20 1`] = `
{
  "entries": [
    {
      "fields": [
        {
          "as": null,
          "id": 176,
          "init": undefined,
          "kind": "def_field",
          "name": "y",
          "ref": y: map[Int]Int;,
          "type": {
            "id": 175,
            "key": "Int",
            "kind": "type_ref_map",
            "ref": map[Int]Int,
            "value": "Int",
          },
        },
      ],
      "id": 177,
      "kind": "def_struct",
      "message": false,
      "name": "A",
      "ref": struct A {
    y: map[Int]Int;
},
    },
    {
      "fields": [
        {
          "as": null,
          "id": 179,
          "init": undefined,
          "kind": "def_field",
          "name": "x",
          "ref": x: map[Int]Int;,
          "type": {
            "id": 178,
            "key": "Int",
            "kind": "type_ref_map",
            "ref": map[Int]Int,
            "value": "Int",
          },
        },
      ],
      "id": 180,
      "kind": "def_struct",
      "message": true,
      "name": "B",
      "ref": message B {
    x: map[Int]Int;
},
    },
  ],
  "id": 181,
  "kind": "program",
}
`;
