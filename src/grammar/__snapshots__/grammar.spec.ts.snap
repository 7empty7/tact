// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`grammar should parse case-0.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 3,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return 0;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 1,
            "kind": "number",
            "ref": 0,
            "value": 0n,
          },
          "id": 2,
          "kind": "return",
          "ref": return 0;,
        },
      ],
    },
  ],
  "id": 4,
  "kind": "program",
}
`;

exports[`grammar should parse case-1.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 13,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 11,
            "kind": "op_binary",
            "left": {
              "id": 9,
              "kind": "op_binary",
              "left": {
                "id": 7,
                "kind": "op_binary",
                "left": {
                  "id": 5,
                  "kind": "number",
                  "ref": 0,
                  "value": 0n,
                },
                "op": "+",
                "ref": 0 + 1,
                "right": {
                  "id": 6,
                  "kind": "number",
                  "ref": 1,
                  "value": 1n,
                },
              },
              "op": "*",
              "ref": (0 + 1) * 10,
              "right": {
                "id": 8,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
            },
            "op": "/",
            "ref": (0 + 1) * 10 / 20,
            "right": {
              "id": 10,
              "kind": "number",
              "ref": 20,
              "value": 20n,
            },
          },
          "id": 12,
          "kind": "return",
          "ref": return (0 + 1) * 10 / 20;,
        },
      ],
    },
  ],
  "id": 14,
  "kind": "program",
}
`;

exports[`grammar should parse case-2.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 25,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 23,
            "kind": "op_binary",
            "left": {
              "id": 21,
              "kind": "op_binary",
              "left": {
                "id": 19,
                "kind": "op_binary",
                "left": {
                  "id": 17,
                  "kind": "op_binary",
                  "left": {
                    "id": 15,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 16,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 18,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 20,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10,
            "right": {
              "id": 22,
              "kind": "number",
              "ref": 10,
              "value": 10n,
            },
          },
          "id": 24,
          "kind": "return",
          "ref": return (0 + 1) * 10 / 20 != 10;,
        },
      ],
    },
  ],
  "id": 26,
  "kind": "program",
}
`;

exports[`grammar should parse case-3.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 39,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 37,
            "kind": "op_binary",
            "left": {
              "id": 33,
              "kind": "op_binary",
              "left": {
                "id": 31,
                "kind": "op_binary",
                "left": {
                  "id": 29,
                  "kind": "op_binary",
                  "left": {
                    "id": 27,
                    "kind": "number",
                    "ref": 0,
                    "value": 0n,
                  },
                  "op": "+",
                  "ref": 0 + 1,
                  "right": {
                    "id": 28,
                    "kind": "number",
                    "ref": 1,
                    "value": 1n,
                  },
                },
                "op": "*",
                "ref": (0 + 1) * 10,
                "right": {
                  "id": 30,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "/",
              "ref": (0 + 1) * 10 / 20,
              "right": {
                "id": 32,
                "kind": "number",
                "ref": 20,
                "value": 20n,
              },
            },
            "op": "!=",
            "ref": (0 + 1) * 10 / 20 != 10 * someId,
            "right": {
              "id": 36,
              "kind": "op_binary",
              "left": {
                "id": 34,
                "kind": "number",
                "ref": 10,
                "value": 10n,
              },
              "op": "*",
              "ref": 10 * someId,
              "right": {
                "id": 35,
                "kind": "id",
                "ref": someId,
                "value": "someId",
              },
            },
          },
          "id": 38,
          "kind": "return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId;,
        },
      ],
    },
  ],
  "id": 40,
  "kind": "program",
}
`;

exports[`grammar should parse case-4.tact 1`] = `
{
  "entries": [
    {
      "args": [],
      "id": 61,
      "kind": "def_function",
      "name": "testFunc",
      "ref": fun testFunc(): Int {
    return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;
},
      "return": "Int",
      "statements": [
        {
          "expression": {
            "id": 59,
            "kind": "op_binary",
            "left": {
              "id": 51,
              "kind": "op_binary",
              "left": {
                "id": 47,
                "kind": "op_binary",
                "left": {
                  "id": 45,
                  "kind": "op_binary",
                  "left": {
                    "id": 43,
                    "kind": "op_binary",
                    "left": {
                      "id": 41,
                      "kind": "number",
                      "ref": 0,
                      "value": 0n,
                    },
                    "op": "+",
                    "ref": 0 + 1,
                    "right": {
                      "id": 42,
                      "kind": "number",
                      "ref": 1,
                      "value": 1n,
                    },
                  },
                  "op": "*",
                  "ref": (0 + 1) * 10,
                  "right": {
                    "id": 44,
                    "kind": "number",
                    "ref": 10,
                    "value": 10n,
                  },
                },
                "op": "/",
                "ref": (0 + 1) * 10 / 20,
                "right": {
                  "id": 46,
                  "kind": "number",
                  "ref": 20,
                  "value": 20n,
                },
              },
              "op": "!=",
              "ref": (0 + 1) * 10 / 20 != 10 * someId,
              "right": {
                "id": 50,
                "kind": "op_binary",
                "left": {
                  "id": 48,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
                "op": "*",
                "ref": 10 * someId,
                "right": {
                  "id": 49,
                  "kind": "id",
                  "ref": someId,
                  "value": "someId",
                },
              },
            },
            "op": "||",
            "ref": (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10,
            "right": {
              "id": 58,
              "kind": "op_binary",
              "left": {
                "id": 54,
                "kind": "op_binary",
                "left": {
                  "id": 52,
                  "kind": "id",
                  "ref": some2,
                  "value": "some2",
                },
                "op": ">",
                "ref": some2 > 10,
                "right": {
                  "id": 53,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
              "op": "&&",
              "ref": some2 > 10 && some3 < 10,
              "right": {
                "id": 57,
                "kind": "op_binary",
                "left": {
                  "id": 55,
                  "kind": "id",
                  "ref": some3,
                  "value": "some3",
                },
                "op": ">",
                "ref": some3 < 10,
                "right": {
                  "id": 56,
                  "kind": "number",
                  "ref": 10,
                  "value": 10n,
                },
              },
            },
          },
          "id": 60,
          "kind": "return",
          "ref": return (0 + 1) * 10 / 20 != 10 * someId || some2 > 10 && some3 < 10;,
        },
      ],
    },
  ],
  "id": 62,
  "kind": "program",
}
`;
