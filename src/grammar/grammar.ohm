Tact {

    // Starting point of the program
    Program = ProgramItem*
    ProgramItem = Struct
                | Contract
                | Primitive
                | StaticFunction
                | NativeFunction

    // Built-in declarations
    Primitive = primitive Type ";"

    // Static function
    StaticFunction = Function
    NativeFunction = nameAttribute "(" id ")" native id "(" ListOf<FunctionArg,","> ")" ";" --withVoid
                   | nameAttribute "(" id ")" native id "(" ListOf<FunctionArg,","> ")" ":" Type ";" --withType
    
    // Field declarations
    Type = typeLiteral "?" --optional
         | typeLiteral --required
    Field = var id ":" Type ";"

    // Struct
    Struct = struct id "{" StructBody* "}"
    StructBody = Field

    // Contract
    Contract = contract id "{" ContractBody* "}"
    ContractBody = Field
                 | Function 

    // Function
    FunctionAttribute = public --public
                      | get    --getter
    Function = ListOf<FunctionAttribute," "> fun id "(" ListOf<FunctionArg,","> ")" "{" Statement* "}" --withVoid
             | ListOf<FunctionAttribute," "> fun id "(" ListOf<FunctionArg,","> ")" ":" Type "{" Statement* "}" --withType
             
    FunctionArg = id ":" Type

    // Statements
    Statement = StatementLet
              | StatementBlock
              | StatementReturn
              | StatementCall
              | StatementStaticCall
              | StatementAssign
    StatementBlock = "{" Statement* "}"
    StatementLet = let id ":" Type "=" Expression ";"
    StatementReturn = return Expression ";"
    StatementCall = ExpressionCall ";"
    StatementStaticCall = ExpressionStaticCall ";"
    StatementAssign = LValue Expression ";"

    // L-value
    LValue = id "=" --id
           | id "." LValue --subId

    // Expressions
    Expression = ExpressionOr
    ExpressionOr = ExpressionOr "||" ExpressionAnd --or
                 | ExpressionAnd
    ExpressionAnd = ExpressionAnd "&&" ExpressionCompare --and
                  | ExpressionCompare
    ExpressionCompare = ExpressionCompare "!=" ExpressionAdd --not
                      | ExpressionCompare "==" ExpressionAdd --eq
                      | ExpressionCompare ">" ExpressionAdd --gt
                      | ExpressionCompare ">=" ExpressionAdd --gte
                      | ExpressionCompare "<" ExpressionAdd --lt
                      | ExpressionCompare "<=" ExpressionAdd --lte
                      | ExpressionAdd
    ExpressionAdd = ExpressionAdd "+" ~"+" ExpressionMul --add
                  | ExpressionAdd "-" ~"-" ExpressionMul --sub
                  | ExpressionMul
    ExpressionMul = ExpressionMul "*" ExpressionUnary --mul
                  | ExpressionMul "/" ExpressionUnary --div
                  | ExpressionUnary
    ExpressionUnary = "-" ExpressionUnarySuffix --neg
                    | "+" ExpressionUnarySuffix --add
                    | "!" ExpressionUnarySuffix --not
                    | ExpressionUnarySuffix
    ExpressionUnarySuffix = ExpressionValue "!!" --notNull
                          | ExpressionValue
    ExpressionBracket = "(" Expression ")"

    // Order is important
    ExpressionValue = ExpressionCall
                    | ExpressionField
                    | ExpressionStaticCall
                    | ExpressionBracket
                    | ExpressionNew
                    | integerLiteral
                    | boolLiteral
                    | id
                    
    ExpressionField = ExpressionValue "." id
    ExpressionCall = ExpressionValue "." id "(" ListOf<Expression, ","> ")"
    ExpressionNew = id "{" ListOf<NewParameter, ","> "}"
    NewParameter = id ":" Expression
    ExpressionStaticCall = ExpressionValue "(" ListOf<Expression, ","> ")"

    // Type Literal
    typeLiteral = letterAsciiUC typeLiteralPart*
    typeLiteralPart = letterAscii | digit | "_"

    // Integer Literal
    // hexDigit defined in Ohm's built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")
    // digit defined in Ohm's built-in rules (otherwise: digit = "0".."9")
    integerLiteral = integerLiteralHex | integerLiteralDec // Order is important
    integerLiteralDec = digit+
    integerLiteralHex = "0x" hexDigit+
                      | "0X" hexDigit+

    // Letters
    letterAsciiLC = "a".."z"
    letterAsciiUC = "A".."Z"
    letterAscii = letterAsciiLC | letterAsciiUC

    // ID Literal
    idStart = letterAscii | "_"
    idPart = letterAscii | digit | "_"
    id = ~reservedWord idStart idPart*

    // Bool Literal
    boolLiteral = ("true" | "false") ~idPart

    // Keywords
    keyword = struct | contract | var | fun | let | return | primitive | extend | native | public | get | null // Order is important
    struct = "struct" ~idPart
    contract = "contract" ~idPart
    var = "var" ~idPart
    let = "let" ~idPart
    fun = "fun" ~idPart
    return = "return" ~idPart
    primitive = "primitive" ~idPart
    extend = "extend" ~idPart
    native = "native" ~idPart
    public = "public" ~idPart
    null = "null" ~idPart
    get = "get" ~idPart

    // Attributes
    nameAttribute = "@name"

    // Reserved
    reservedWord = keyword
}
