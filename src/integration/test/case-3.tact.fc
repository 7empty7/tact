forall X -> X __tact_get(tuple x, int i) asm "INDEXVAR";
forall X -> tuple __tact_set(tuple x, int i, X v) asm "SETINDEXVARQ";

builder __gen_write_Source(builder build, tuple v) {
    return build
        .store_int(257, __tact_get(v, 0))
        .store_int(257, __tact_get(v, 1))
    ;
}

(slice, tuple) __gen_read_Source(slice sc) {
    int __a = sc~load_int(257);
    int __b = sc~load_int(257);
    tuple res = empty_tuple();
    res = tpush(res, __a);
    res = tpush(res, __b);
    return (sc, res);
}

builder __gen_write_SampleContract(builder build, tuple v) {
    return build
        .store_int(257, __tact_get(v, 0))
        .store_int(257, __tact_get(v, 1))
        .store_ref(begin_cell()
            .__gen_write_Source(__tact_get(v, 2))
        .end_cell())
    ;
}

(slice, tuple) __gen_read_SampleContract(slice sc) {
    int __a = sc~load_int(257);
    int __b = sc~load_int(257);
    sc = (sc~load_ref()).begin_parse();
    tuple __c = sc~__gen_read_Source();
    tuple res = empty_tuple();
    res = tpush(res, __a);
    res = tpush(res, __b);
    res = tpush(res, __c);
    return (sc, res);
}

builder __gen_write_SampleContract_addStake(builder build, tuple v) {
    return build
    ;
}

(slice, tuple) __gen_read_SampleContract_addStake(slice sc) {
    tuple res = empty_tuple();
    return (sc, res);
}

tuple __gen_load_SampleContract() {
    slice sc = get_data().begin_parse();
    tuple res = sc~__gen_read_SampleContract();
    return res;
}

() __gen_store_SampleContract(tuple v) impure {
    builder b = begin_cell();
    b = __gen_write_SampleContract(b, v);
    set_data(b.end_cell());
}

int isZero(int x, int y, int z, tuple m) {
    m = __tact_set(m, 1, 10);
    return (((x + __tact_get(m, 1)) > 0) & z);
}

(tuple, ()) __gen_SampleContract_addStake(tuple self) {
    self = __tact_set(self, 0, 10);
    self = __tact_set(self, 1, -20);
    self = __tact_set(self, 2, tpush(tpush(empty_tuple(), 10), 20));
    return (self, ());
}

(tuple, int) __gen_SampleContract_stake(tuple self) {
    return (self, __tact_get(self, 0));
}

_ __gen_get_stake() method_id(80984) {
    tuple self = __gen_load_SampleContract();
    var res = self~__gen_SampleContract_stake();
    return res;
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    int op = in_msg~load_int(32);
    tuple self = __gen_load_SampleContract();
    if (op == 4241841802) {
        tuple msg = in_msg~__gen_read_SampleContract_addStake();
        self~__gen_SampleContract_addStake();
    }
    __gen_store_SampleContract(self);
}