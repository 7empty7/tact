forall X -> X __tact_get(tuple x, int i) asm "INDEXVAR";

builder __gen_write_Source(builder build_0, tuple v) {
    var v_0 = __tact_get(v, 0);
    build_0 = store_int(build_0, 257, v_0);
    var v_1 = __tact_get(v, 1);
    build_0 = store_int(build_0, 257, v_1);
    var v_2 = __tact_get(v, 2);
    build_0 = store_int(build_0, 257, v_2);
    var build_1 = begin_cell();
    var v_3 = __tact_get(v, 3);
    build_1 = store_int(build_1, 257, v_3);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, tuple) __gen_read_Source(slice sc) {
    int __a = sc~load_int(257);
    int __b = sc~load_int(257);
    int __c = sc~load_int(257);
    sc = (sc~load_ref()).begin_parse();
    int __d = sc~load_int(257);
    tuple res = empty_tuple();
    res = tpush(res, __a);
    res = tpush(res, __b);
    res = tpush(res, __c);
    res = tpush(res, __d);
    return (sc, res);
}

int isZero(int x, int y, int z, tuple m) {
    int b = (x + y);
    b = (((b + 1) + __tact_get(m, 0)) + __tact_get(m, 1));
    return ((b > 0) & z);
}

() recv_internal(cell in_msg_cell, slice in_msg) impure {
    throw(100);
}