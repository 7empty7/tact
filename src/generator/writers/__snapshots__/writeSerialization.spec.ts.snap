// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`writeSerialization should write serializer for A 1`] = `
"forall X -> tuple __tact_set(tuple x, X v, int i) asm "SETINDEXVARQ";

() __tact_nop() impure asm "NOP";

forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

global (int, slice, int) __tact_context;
global cell __tact_context_sys;

(int, slice, int) __tact_context_get() inline { return __tact_context; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

slice __tact_compute_contract_address(int chain, cell code, cell data) {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    var b2 = begin_cell();
    b2 = b2.store_uint(2, 2);
    b2 = b2.store_uint(0, 1);
    b2 = b2.store_int(chain, 8);
    b2 = b2.store_uint(hash, 256);
    return b2.end_cell().begin_parse();
}

forall X -> tuple __tact_to_tuple(X x) impure asm "NOP";

forall X -> X __tact_from_tuple(tuple x) impure asm "NOP";

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

int __tact_address_neq(slice a, slice b) inline {
    return ~ equal_slice_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(100, ok);
    return data;
}

builder __gen_write_A(builder build_0, (int, int, int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
    build_0 = store_int(build_0, v'a, 257);
    build_0 = store_int(build_0, v'b, 257);
    if (null?(v'c)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_int(build_0, v'c, 257);
    }
    build_0 = store_int(build_0, v'd, 1);
    if (null?(v'e)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_int(build_0, v'e, 1);
    }
    var build_1 = begin_cell();
    build_1 = store_int(build_1, v'f, 257);
    build_1 = store_int(build_1, v'g, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell __gen_writecell_A((int, int, int, int, int, int, int) v) inline {
    return __gen_write_A(begin_cell(), v).end_cell();
}

slice __gen_writeslice_A((int, int, int, int, int, int, int) v}) inline {
    return __gen_writecell_A(v).begin_parse();
}

(slice, ((int, int, int, int, int, int, int))) __gen_read_A(slice sc) inline {
    var v'a = sc~load_int(257);
    var v'b = sc~load_int(257);
    var v'c = null();
    if (sc~load_int(1)) {
        var v'c = sc~load_int(257);
    }
    var v'd = sc~load_int(1);
    var v'e = null();
    if (sc~load_int(1)) {
        var v'e = sc~load_int(1);
    }
    sc = (sc~load_ref()).begin_parse();
    var v'f = sc~load_int(257);
    var v'g = sc~load_int(257);
    return (sc, (v'a, v'b, v'c, v'd, v'e, v'f, v'g));
}"
`;

exports[`writeSerialization should write serializer for B 1`] = `
"forall X -> tuple __tact_set(tuple x, X v, int i) asm "SETINDEXVARQ";

() __tact_nop() impure asm "NOP";

forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

global (int, slice, int) __tact_context;
global cell __tact_context_sys;

(int, slice, int) __tact_context_get() inline { return __tact_context; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

slice __tact_compute_contract_address(int chain, cell code, cell data) {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    var b2 = begin_cell();
    b2 = b2.store_uint(2, 2);
    b2 = b2.store_uint(0, 1);
    b2 = b2.store_int(chain, 8);
    b2 = b2.store_uint(hash, 256);
    return b2.end_cell().begin_parse();
}

forall X -> tuple __tact_to_tuple(X x) impure asm "NOP";

forall X -> X __tact_from_tuple(tuple x) impure asm "NOP";

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

int __tact_address_neq(slice a, slice b) inline {
    return ~ equal_slice_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(100, ok);
    return data;
}

builder __gen_write_B(builder build_0, (int, int, int, int, int, int, int) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g) = v;
    build_0 = store_int(build_0, v'a, 257);
    build_0 = store_int(build_0, v'b, 257);
    if (null?(v'c)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_int(build_0, v'c, 257);
    }
    build_0 = store_int(build_0, v'd, 1);
    if (null?(v'e)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_int(build_0, v'e, 1);
    }
    var build_1 = begin_cell();
    build_1 = store_int(build_1, v'f, 257);
    build_1 = store_int(build_1, v'g, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell __gen_writecell_B((int, int, int, int, int, int, int) v) inline {
    return __gen_write_B(begin_cell(), v).end_cell();
}

slice __gen_writeslice_B((int, int, int, int, int, int, int) v}) inline {
    return __gen_writecell_B(v).begin_parse();
}

(slice, ((int, int, int, int, int, int, int))) __gen_read_B(slice sc) inline {
    var v'a = sc~load_int(257);
    var v'b = sc~load_int(257);
    var v'c = null();
    if (sc~load_int(1)) {
        var v'c = sc~load_int(257);
    }
    var v'd = sc~load_int(1);
    var v'e = null();
    if (sc~load_int(1)) {
        var v'e = sc~load_int(1);
    }
    sc = (sc~load_ref()).begin_parse();
    var v'f = sc~load_int(257);
    var v'g = sc~load_int(257);
    return (sc, (v'a, v'b, v'c, v'd, v'e, v'f, v'g));
}"
`;

exports[`writeSerialization should write serializer for C 1`] = `
"forall X -> tuple __tact_set(tuple x, X v, int i) asm "SETINDEXVARQ";

() __tact_nop() impure asm "NOP";

forall X -> X __tact_not_null(X x) { throw_if(14, null?(x)); return x; }

global (int, slice, int) __tact_context;
global cell __tact_context_sys;

(int, slice, int) __tact_context_get() inline { return __tact_context; }

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    b = b.store_slice(address);
    return b;
}

slice __tact_compute_contract_address(int chain, cell code, cell data) {
    var b = begin_cell();
    b = b.store_uint(0, 2);
    b = b.store_uint(3, 2);
    b = b.store_uint(0, 1);
    b = b.store_ref(code);
    b = b.store_ref(data);
    var hash = cell_hash(b.end_cell());
    var b2 = begin_cell();
    b2 = b2.store_uint(2, 2);
    b2 = b2.store_uint(0, 1);
    b2 = b2.store_int(chain, 8);
    b2 = b2.store_uint(hash, 256);
    return b2.end_cell().begin_parse();
}

forall X -> tuple __tact_to_tuple(X x) impure asm "NOP";

forall X -> X __tact_from_tuple(tuple x) impure asm "NOP";

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

int __tact_address_neq(slice a, slice b) inline {
    return ~ equal_slice_bits(a, b);
}

cell __tact_dict_set_code(cell dict, int id, cell code) inline {
    return udict_set_ref(dict, 16, id, code);
}

cell __tact_dict_get_code(cell dict, int id) inline {
    var (data, ok) = udict_get_ref?(dict, 16, id);
    throw_unless(100, ok);
    return data;
}

builder __gen_write_C(builder build_0, (cell, cell, slice, slice, int, int, int, slice) v) inline {
    var (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h) = v;
    build_0 = store_ref(build_0, v'a);
    if (null?(v'b)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_ref(build_0, v'b);
    }
    if (null?(v'c)) {
        build_0 = store_int(build_0, false, 1);
    } else {
        build_0 = store_int(build_0, true, 1);
        build_0 = store_ref(build_0, v'c.end_cell());
    }
    var build_1 = begin_cell();
    if (null?(v'd)) {
        build_1 = store_int(build_1, false, 1);
    } else {
        build_1 = store_int(build_1, true, 1);
        build_1 = store_ref(build_1, v'd.end_cell());
    }
    build_1 = store_int(build_1, v'e, 1);
    build_1 = store_int(build_1, v'f, 257);
    build_1 = store_int(build_1, v'g, 257);
    build_1 = __tact_store_address(build_1, v'h);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell __gen_writecell_C((cell, cell, slice, slice, int, int, int, slice) v) inline {
    return __gen_write_C(begin_cell(), v).end_cell();
}

slice __gen_writeslice_C((cell, cell, slice, slice, int, int, int, slice) v}) inline {
    return __gen_writecell_C(v).begin_parse();
}

(slice, ((cell, cell, slice, slice, int, int, int, slice))) __gen_read_C(slice sc) inline {
    var v'a = sc~load_ref();
    var v'b = null();
    if (sc~load_int(1)) {
        var v'b = sc~load_ref();
    }
    var v'c = null();
    if (sc~load_int(1)) {
        var v'c = sc~load_ref().begin_parse();
    }
    sc = (sc~load_ref()).begin_parse();
    var v'd = null();
    if (sc~load_int(1)) {
        var v'd = sc~load_ref().begin_parse();
    }
    var v'e = sc~load_int(1);
    var v'f = sc~load_int(257);
    var v'g = sc~load_int(257);
    var v'h = sc~__tact_load_address();
    return (sc, (v'a, v'b, v'c, v'd, v'e, v'f, v'g, v'h));
}"
`;
